#!/usr/bin/python3

# Run as: create-html-table.py {input-file-name}
# The script requires 1 argument: the input file name.
# It expects a comma-separated input file to parse into an html table,
# and assumes that the column headers are located in the first row.
import operator
import sys
import math
import json

class WebCreator:
    diccionariNivells = {}
    #fileout = open("pruebaLauncher.html", "w")
    fileout = None

    #IMATGES
    srcLliure = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAMUSURBVHhe7Z3JQsMwDERb/v+fAQOGkniRbEsaJ/MucGqteRmZ5dDn+ycPAsN2Qp7P5893MnZ73mCFaIPXgioKSoi1hBpIcsKFREmoES0nTAiaiCNRYtyFzIrQHneFeM+I3ISMBGN1NKSzHDEXoh3ea/AM2vlMhUiH9ZZQQyPH6swmQnYTcSTy/MuFSIZBFXEkYpalQnoD7CLiiOdcbz9fp7mqjEQ6e+v8kiZJmW7IlUWUsJ53qiF3k5HozTTblmEhd5SRsZSy7A555coyMlYzDt0htSfgDiJKrMxD3RDKOFObfWR1qYTM7Ma7os1MLKT1wnduR6aVgUbK9KVOGX+skCISUnsxyjgzm0lXCGXoqWUjacn0yiJlRh/YphC2Yz29lqgbQhlyRrKqCpHsOzJGK1tVQ9gOPdrMikLYDntqGYsbwnaMo8nuJITt8KOUtaghbMc80gxVlzqx558QritbSi05Zt5tCNeVL1xZYPwK4bqK4zX7ZkO4rtbTy5QrCwwKAYNCwKCQAFq/j3wJKf2ExQs9BjYEDAoBg0LAoBAwKAQMCgGDQsCgEDAoBAwKAYNCwPgS0vpjF/GFDQmg9cdcCgGDQsCgEDCaQnix+/MrhP8h9KH331muLDC6Qri2fPknhGvLlt66SnBlgSESwrU1jzTDkxCuLT9KWYtXFlsyjia7ohC2JA7Vpc6W6KllVnvoq0LYkhhUDUmwJXK07Ug0hbAl6+llqm5Igi3pM5pRV0jNKKXUGVlVmaGGZCjlzGwmIiEts5TyRysL6X0sbgiltFkhI6FaWZoXJt9oM1PfIbU3uHNLarOPPMDDn0G1qqI7Y5HB1E9ZNe7QFqsZh4X0noArS+nNNrMhphpyRymWMhLLPumzddBFbxGOx4z86FUBnnMtFZLoHT6xi5iIWZYLSUgGSaCKiTy/iZCEdKgEihiEM5sJyewgBumM5kIymqEzlkfTnsfrYXETkhkRkxk96sx7JjwjcheSmQ3Jg4howoRk0MQExxEv5JVIOSgxQAl5xVoO6Ni4QkqMStpoxL2EXJ/H4wOJqL8/3L5pYAAAAABJRU5ErkJggg=='
    srcFinal = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMpSURBVHhe7ZxBchwhDEU9OUrOk6qcNVU5T64ykUtd7TZIQgJBN6C38Wyg+W++GC88fr3f749AxyNkvV6v4xXPI845/hAaNRpuOPmwR3o5yhkXofeT+jnK6Z6l3wNGarrSMVGPra2afv75dbzi+ff77/FKjXs0Z1lKTRo7Mkp3zum8ttNoaneUo7HmltFlI9lUD0c5RWvtSVtlPUHTFVlZa9iW9YKp8ZquCMqa8lYv5kzdq+kKp6w+ct3K55s6IZVVprYum0jTiVfFfhw/dcxoCuCOJ9y5JAZZk5pCXHzZmpUzhSmk/ajaOyt/BybSlJBfYUoJqmatZArID68cxrIs01TPiyZmQRa5xdS1QsgIRV/mC34BU0iFL0lWvnIZU4g1DitreVNIHkool3kM10NfAlrWJrXi4MqlatbyppQBCVnC0O4DKaHcrE0GUBMzlRW1OslVFJq11b1eDPtNVtQqIREiNWurWiFy5PIFH5x8yYoZRJJyXbWwzdpwBovEGBo4ZMUMCpxy6GZtPoNc/BhDAyHLQMgyELJoyN+2PmUlH4XxGxZHNMtAyDIQsgyELAMhy0DIMhCyDIQsAyHLQMgyELIMfMpK/lZX+JbQ5kSzaJLGYJ9CloGQZSBkGaBlxR1PcsiyfvNubcjbHYgxNMDKiknM+ZIVk4hwMwjEGBqQZG04iXLkb7JiEhMSIYUx3KpcxbCprCiXQPmC36Rcecy8N4SsKBdHuVnA8uXS1AqgZW1eLi6+qlnAwuXSR2Nl5XaX9KUcQETbLGQxX9Y4kizS8TK+yCDyZV1o1qq+KkwB5TEsbrEGmpiqOyvfaOpy5YdXFsLwP//I7/fM9afNddN3Yvs0zJmoYu1HNcji3oEpfHGH1NcKsDVrUl8upgDPf+r6zPuLNFWZum4ZQPoCnqPMq1An9bIAzhdwrzLhWmjK27IYEHwB45XJt2dr2Mb1gOwLGKNM1gQ4JG3fArlR2QBNiJsspKgMcRFXdAQ4p/PdDlEqQ/TiNHauuEfrIgsxKfOlU6iOspCRyrpn6f2Ak67WxqQYJ+vEy9oNJx//yAS9u/uPevsJpuHj4z8rOaFcZE981QAAAABJRU5ErkJggg=='
    srcPlayer = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAT1SURBVHhe7dABjqMwDIXhvf9x9wKzUfvowh/HsQMBquHTk6oZbCfxn59H2C2W9SdApZe64BJ6/W4ad6LzjtQTJ9AB800/SQ86hY6cZuIBesHpdPwEU0br1mE/f/sZoNsc5+CJumYPFjGQIF3rIIeN0+1cePAhidAVdztmkC7VgOdNSpfuusPeEbpIA95zQny69Khd/bqCBW84OQ5dfch4sw6v4N4XpkUPyBvs1LEVXPcOMekZSek2nVbBFW+VFj0pLNegQyq43A3ToofFJKo1voJr3TYtel7A3mXhQjePSc8LiJZq8Aru8UWp6ZE9oTqNXMHxX5eanurqF2nYFs7+upj04LZOhcZs4eAvjUnPbkgvC0denjV86sakl1vcbxUcFs8aPg2nBWV+anq8pflNrSs4JpgWlGXjQ7GfmlZQmbssH4rjiUCLH9AKKvYHNa1geiQRaIkkDo1OalrEVmhZGB1JHBq7iUOjH9Aitoz/qnwFcyOJQ2M3cWj0U9M6VvrLwtBg4tDoJwvtfkDrWOG/VLiCiZFkod1JFtr91LSURWdZGBdMFtqdZKG9G9BSFpu/VbKCWcFkob2VMRjip6bVvHjLwqBgxmCImTEY0g1oNS/PshjQal7+/6GPK5gSzBgMMTMGQyIBLchZFvrjGYMhZsZgSCSgBT3LMgNa0GdZ+vcK+uMZgyFmxmBIJDVtST9baE5lDIaYGYMhwYC2pJ8tdKYyBkPMjMGQYEBb0s8WOlMZgyGtZKE9HtCW9LOFzmyy0O4kC+3xgLakny10ZpOFdidZaE8FtCz9tUDPQLLQ7icOjdnArGWVxKGxmzg0ZgPPsrzAVy6rJAItA4GJyyqJQEs8PhSPBeYuq8SH4mxaUDYcmL6skhaUDQfwdU/gjGW9A/h6z8B5y/rGwLMsL/Asyws8y/ICWtazLzPwLKsZ0Jb0s4XOXxjQlvSzhc5fGNCW9LOFzl8Y0Jb0U0Gzkw/8/z75wP+dgLb0/in07wWaWwF8vUMAX82AFnT4sgoUXJsaCsyAFuQsq8AIMybUXJgaCsyAFrReVqGPC4xoxYSaS1JDgRnQal4OWFaJCTUnp4aCVkCrefGWVWCQExNqTosJNWZqWs3L5o9CJQvM8mNCzQkxoaYV0FIWnWUVGOfHhJqpMaGmlZqWsuDfhQoXmNhNC8pmxIQaJzVtZNFfVoGh3bSg7NiYUOOkpnWsGP8qVL7A3EgcqNyfFpT5qWkXK6FlFRgdiQOVe9KCMj81LWLL/m+hpgWmx+NDcTw+FHcDWkEluqwCB8QTgRYnXajvpqYVVJofCrWu4Jh4zoFDI6np8ZbcsgoclspUOCsSkx5v8b4VGrCFI7M5HOYHY9KzGzqfC43ZwsFj2QnTUjHpwW39ikLDVnD2zqSgdyw1PdUVKio0cgXHf1FqemRPtK7Q4C3c4+Yx6XkBe5dV4EK3TYueF5AoLTS+gmvdMC16WEyuutAhFVzuVmnRk8LSDW86bQtXvElMekbSYFuhYyu464Vp0QPyxjsLHW7BvU+OQ1cfsqu50BUa8IYT4tOlR+3tL3SRNrxnUrp03R0OGPGmG7XhbQemS1fc7bBBb7pdD147lghd6yAHj3vTTWOwAidZus1xpizrTVe+gm5wtInLetP1T6Ejp5l+wIceNIfOmOy8ZX3ofbtp3IkuOBL09AA1XOf6G3yNn59/guAXocCg+WMAAAAASUVORK5CYII='
    srcObstacle = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAARISURBVHhe7dxbctw4DEBRd/bVq/fCHLigomUSBEHiqVTuz3hclkiehpSfxK+vr6+P/8kqgfV6va6v5pXYZ/wmJDSSEnYetqSV0VjcEbxX8jMacz+L3wKRTPccT+Rx612mz8/P66t57/f7+kqc+dGMsYRMEh0+oZ3x6axuJ2HSG41J1MzOaHIjXsrDaGyppj+pFqsC0z2eTHtYzfWMVDzTPYZMdd7ji2dSuUz3ZmTnRz67sr5UiyQ7PPXuZQ9ialmN2J/rv7KeKAXNtse8c8k2sB4qhZl47U3W2COkMP1Wpe+s8RN4EFPX+AoTIogm61+SgsbNCx/GNRZ/I/iUsOv/q3btcr5PidcCi7xF+2TuazP7SG/cJ/lkLL22X/DMA1jTa7arAy8Oa7ySkcKqefH7WR6na4olkSIXq+NF7qTb83gEZri2H8Ousl4SKYz8JhmNtfUAFvSSS5HNhks0WctlSnkdSAkdCSzmoWUq4qWcqRaJsJ4s+UrpXhopyY/1WGdj1Ur0spqp1kixmKyDxVK8TKSWP/8LSzlWrWAv85lqdSDcZGnWC/OyleIvXL/gjwvw8pspsh8sq2fwnquXk1R3hzvLdLKsPh8nr+CZwhwfw5a5V4oUdGF5PIP3DL3ipRoOPVkea5t4xUjNbhjxGLaUXvEz1RWKBR17pUtB0VjQgVcFKSgBC9rySpHq7o/v+G+s7o/CmE9M6FVkprCcycKWXqWkoEwsiPGqJgUlY0HL+WrlSkH5WJBEIV0KKoEF8RYVpKAqWNBMpIgUVAiLfE9Bs+/HVwWLFyniVQJLYlHBKx+LVCDfU+leyViMVEGvb6zu7+qGbWg5U9W80iZrKYVleXVL4DzlYAmlsDrzlYC1JYUV8YrGOpDCKnjRWE6bOJbC0r0urN1/eXeQUgqL8epu2HCCHkMTKSxxvqZYhssbSmFZXj9YTk+iuRTm59Xd5M7i+xg6SWHx88VhKRd2lcLMvfhrf2EZPokBUpjrfHUgi8fwbNUwKczKa3lJj6UfrmApzHW+WusX/NaSKVKY0mv8yXFuCKzj4UqUwrznaz1ZkGS9dCnszGv8AXJiaKzd4Soihenna3Z80WRBzGKlpLAtL7njFGvUJW9aUAoTeo3fYZ4q6WRh3a3LSmHLnZD7Z+KwSGN+gTpSGLMf8iD8y3oxWVte1aSw+67a1wdSkOi3HI3//mJctabUrBFL5CD5IYjxelxnUtDG7/wbvaCnDxQkF9j703CMXL5m+q1uYM0+gUd4zTYpHytob7Ie6mUiBW3/nlLsQe8vUurw1GeXQaQXVIfMaqBa51jQzAvKJWNeC6rzai6GGC8onox/e2oPq7we4r2gGDKeCTI4qf4WWCJZABNmhoUtyTATuKURZHw629thQjJMDifRuWd+NBcsbIvMNqdDOWJhkWTuZ/FeoOWqFnOKOKyWlVrCzuOX7JLb5W81fQeP6ePjLyoE7LmOqsTYAAAAAElFTkSuQmCC'
    srcGuardiaAmunt = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAQTSURBVHhe7ZxLlhMxDEUTtsCUIftfEUOmrAFQiBvH7Y8k6+eU7qQzqLbL71pynZM6uf/+yy0Jw3FC7vf78xOO0/ZbWCHU4KlEFRVKiLaEEZHkuAvxkjDCW46bkGgiWrzEmAvZFfHr2/fnJxxff/54fuJjGZGZEI4IavhYOJKspKgLoYrQkjCCKkdbjKoQrAxrCSMocrRiUxFymogWrBgNKeJCMDKiimjBiJGWIipkJaMWUS82kqDefa3ESEoRE8KVUeMpBnNPMzFSUraFUEQUVjvOUgz1XlbX74rZEsKRAawWVaMlB3sPnA21I4UthCujQJECSImR2gxaUlSEUMKzEiMlomY2pqmQkYydXawlRkNEy2gOjhSyEA0ZNVJiLETUSEn58vyLYnVuSADhUALqBYGVQZ2LAzUzdIVInRkcVgG381Ovl2I2L7ZStoVoy6gZLRgrpHev7bW769mVghJiIYMSTH3t6LrVNbPggJ21jcYWEaItQzOYEas5Cx5SSIe6NJhgsOFhoYy3MzdX5lSIZnVYBVPDGUdq7sLs4QggV4i1jIJ0MBZwshoKWZlM+MyyJVWIRHV4sVNhO/9LzawrRLM6vIKJxihjdIWcXB3eULL7JOQdzw6JytKozl7WqAqRqo6owViAzZB0qCf6vAh5x3YViV6VtJkvKyQPc1uyZQXjQ0i2Kz/q7KcVku1KnlWm2bKCcQkhEpVu1S1MhZwUjBfZshzobapysD+E9J6w3m0n7qzHMgvzCjklGC+yZQXjUkI4FWZdlS5CPIOhjGMtA3CrEM9gMON5yABcW5ZnMDDuaGwvGcDjVdIIj729bwI9g9Gmt154zTSMkKsxEpKPvcFIIcFIIcF4CIHe1XLq6zankxXiwOhAB1JIMFJIMFJIMKZC8mC350NI70krkWd2oAPZsoKxFJJty5YXIdm2dFm1KyBbVjBQQrJt7YPN8JOQbFt29LJGt6ysEj6U7LpCskr8IB3qWSV0RpmNNv3097K0vms/WSx1/VQhpAoBdsM8vcoo90+VAUyFzP4x4bHKlFwhwOm73AJuRkshI6PcCU9/3wtz/5xWVdj6VVIgX6h7ZbZRMUJQLWs2ULav/+zKANBnSEqZIyEDIB3qlIGTf1AzIz9ljSa4cpWM1s7ZwKhDvUce9HJtqoZcIRiuUC1aa2QLWe2Ad5ayWhu3OoCtCrmiFE0ZAPsMabnCmTKTIRSjnBBgJgU4VYx2VdSICgFWUoBTxGBarnB88kIAjBQgqhjs2acQnY4QACsFiCIGKwJQik1PSOEEMRFEFNSFFChiCpqCKBIAo5jshBQ4YgpcQdTwWywjMhdS2BFjhUc0bkIK0cQ4x+EvpMZTTpQYQgmp0ZYTdNlxhfTgSjpoiWcJeX9utz+ULr+0f2tdDAAAAABJRU5ErkJggg=='
    srcGuardiaAvall = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAQWSURBVHhe7ZxJchsxDEWtXCHbLHP/E2WZbc6QBCrRRVMcABATu/E2ll0y2fyPINpulx9///ORhOEoIY/H4/WKxkl7LqwQbvhYokoKI0RbwIxIctyFeIro4S3HRUg0CT28xJgK2RXx58fP1ysa33//er2iYy3GTAhVBjd8DBxBVmLUhVBEaEqYQRGkLUZNyAkiWiKIURGClRFFRAtWjIYUcSEYGVFFtGDESEsRFbKScYqIlpUYSSliQmYyThXRMhMjJWVbyFWrYoR2tXx7fWRxNxnAak2YHjqDLeSOMgqaUrYqZMSVZRS01sjqIaMdcAcRPUZ9hdNPyBWSMt4ZrZ1zdJGE7JyNd4WaGVrIbOA7V0dhlgFFCkpIysAhIQXV1EeDYWRgfh8UFe5m22nyywq5qwyAe/2jbDBVQr7LArg7505wM5oKwZ57CZ5VpkMhO0dV4fRK2r1+zvcPm7qEkITe4LsVkjLkoGbGaurJPqNNjxaS1cGHkt2bkNVdQCJHL2tUhWR17IPNMHtIML4I6ZVQVocubeZZIYZgNncKCcankDyu/KizzwoxZrXJU0gwUkgwUkgwnkKyocchK8SB3mYvRZFCgpFCgpFCgvF8pn63pt57zm293t41wHN2VyEewaz++M1KzEiI25E1Cga+vgqNC2ZcrbmxuAjxCIYynqcUcyEewXDG8ZJiKuSkYLzI295gXF7IToV5VKeZkNOC0aS3HrjlBZ5Cyic1VwvhFC59ZElsKuuNaSLkxGC8uHxTP42pkOwj8qwy/RTSa+yJDXX2eWQFI4UYgmkBX4TkzyP2tJlnhQQDJeTUKpF4+if1BBGb4ZsQjbutSMFEopc1+sjKXsKHkl1XiEaVeLFTWZpVOcqY1NR3qiRqMNpQMxsKuVKVRGOWLalCgBN7CafCJKqSk9VUiHSVeAUDUMbRlLHKlFwhgFUvkZJRwIwnPScV9X+COWIltTd2/T2juTHvAdr5JUWM1oY5cbaEALsLwQQzWmD7Xuz7NNmRAaCEAJpSRowWV8AKKWiLmc0vLgSwkrIKtkAVUiMtR0IGQGrqlIE5wKK4MgBKyJS5dqBmRqqQgnSTpwSDnYMa9k7FjObibGCWEEDi+NIQ0aIpZjY2M1YdIcBsYRYiWqTFrMYzFwJwpGCDkRLRIrEZtGQAW0IAqpTVYrRE9OBci6YMYFtIAdtTRguyFNGCuSZtEQUxIQC2WurFeYpoGV2XlQxAVAiwkgJEkjBjJQIQjk9eCICRAkQVgxEBKESnIwTASgGiiPEUUVATUqCIAazlYCUUlOPSF1KgigG05FAlAEYx2QkBOFJaqJI44dcYxvPEVEiNhBxNnGLxE1KIJsY5Dn8hNV5yAkUQS0iNtpygy44rZARV1GHLO0/Itfn4+AdEbJps3zb0TgAAAABJRU5ErkJggg=='
    srcGuardiaDreta = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAARvSURBVHhe7ZxBkhshDEXtXCHbLHP/E2WZbc6QRB7jwhiBJCQQtF6VK06lTYNef9Q9nsr9739ugRu2E3K/35/vaOx2vbkVwi08F6+iXAmxloDhSc5yIaskYKyWs0yINxElq8RMFzIq4s+Pn893NL7//vV8J2O2mGlCJCK4xacikTRLjLkQrggrCRhcOdZizIRwRMyWgEGVYynFRAhVhhcRJSvFqAuhyPAqooQiRluKqpCejF1ElPTEaEpRE9KSsauInFlShoWcmgoMazHfnn+KuJoMoLcmSg9tIRZyRRkJSylDCcE4WUbCao2iHoJdAVcQUQPrK5J+wk5IyPgEW7tk62IJGdkbrwq3ZmQhrYGvnI5EqwYcKSQhIYOGRi2G7rJCxidYTagp6QrBBgoZOCNSRAkJGXY0hXCaUfCONCXNB8Pah3dNB+W7DYu11c7bemBEhWj1jnxCs2VSJGBozZX7FM8SMiIjYS1lRAIGZ861C7A2J0xItYfs2jssZADUccvjWp/Daky+y7K+skexkpEYGZ9Tuw8hO6bDWkaidR7JHGq1JiXEezq8kteNWkPyluWVWelI1M6nOYc3IRp3VsEX1LqVNd8+IavhpIMiKYQYMLKrvITseHe1grzYWr0jr30zITv0jx3mmNOb7xFb1iwplPOMzuWYHmItpRzf6nb7qKZuJYU6rsb5H0JOev6AeafXCK1xrNIBHJWQklZRa3CPz+F8pnZsCsXj+xCrhNSuJI1xV4Klg7uu2jjwHcnRCZmF5kUWQpwRQpiUadDegkOIAJCQXtqEEGeEEGeEEGeEEAHwDJFe2oQQJqUEbSkhxBkhRAFuSmrHp18tff1ur8XPs2ontrh3p0IpHGV+o+tqCTk+IbD49KLAPT7BPR7jSCHSopZg41im/DghoxIwKONqnPsoIVYyEvn40pT05vgSkppKjvUCNZk11955JPPIa398U7fEopccIWR2kqUpocyzK2T2YndjNCVlq3gTUusjgQzphUzasiIlbSgpodbwQ0ikpA91m+pJqNWa3NQ9p8TibodLaw6c2pGFeGeWFK3zYDtRVQh2sPdeYi2lN3757/B3bs2OSUjCSgp1XDguvSSw/zcggHqy2tUhnaiUkVSPzhU7d6Pk7YS0PrgL6WqlFpd7PJdeTZsJAUZS4iEhq5CkA+j2EGwAylZQFj9k9HecbkIALCXAVYpMpXWhUoSQ7rJaA1GSchVGZQDk296Q0kZDBsB6DuEMHHzBrRlLCICd4MopwdYuuYBJTb1GNHq9bSqHnRAKV0iL1RrFQnpXwMlSemuTpgMYSsgVpVjKAMQ9pOQKPaUlQ6mMekKAlhRgVzHWqchRFQL0pAC7iKFsucrl0xcCUKQAXsVQe59B6WyEAFQpgBcxVBGAUdnshCR2EONBRMJcSIIjBrCUwxGQmFSmeUIArpQSqSSJgMTE8jyYKiQxKmYGC8ryYImQHG9yFpdjvZCcVXIclcCXkBxrOU6X7VdIDamkjZa4l5Dzud3+AZIivJ3R1GDTAAAAAElFTkSuQmCC'
    srcGuardiaEsquerra = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAARtSURBVHhe7ZxBkhshDEXtXCHbLHP/E2WZbc4wE02MgzEISUggaL0qV7ywcfMfH9yeqtw//nIL3LCVkPv9/njGY6c151aINHwqXiW5EmItoYUnOcuFrJLQYrWcZUK8iaixIprpQkZE/Pnx8/GMx/ffvx7PZMyMaJoQiQipAApcSbOkmAvhiLAUgMGRYy3GTMgOIko8iDERQpXhRUQJVYyFFHUhFBleRZRQxGhLURXSk7GLiJKeGE0pakIwGbuKKMHEaEkZFnJqK1pYt+Xb418RV5MB9OZEOUMxxEKuKCNhKWWoIS1OlpGwmqPoDGmtgCuIqNE6VyTnCbshIeOd1twlWxdLyMjeeFW4mZGFYANfuR0JLAOOFJKQkEFDQwrpUG8NdhUZ+aFNmfPIId9tSMh4Dbd3pw60sqG0pNuQ2iCaMkYmOIPa9VGvp/beXkvQhlD3PS5woelBgft6z/QybTZEe6uyCHNGc2rXzfnc1rxbTWHdhyTSaqWGTH0dF6txV8ISAiujDKEXinVo3qW02tTagapCtM6OWWF5l8KB3BBs3/QQiGcpnDPnTUivHdTBT1q1VtSyJjWEIiEE4FAXMutQT3AqGOCULXkRMnqYR0twKAu525DWIL3BZ7folNaKtiyMaMkYTyGS7cpLS3ZqR+1a8+zRhkgnmrfEOqydZFAY3rIogViFdpoMQP0MSZRnCYSXHiNojeMVFSHccLihcl+/M8+/h9QOdU4ArW9Xu4dYm5fGnGrjgoqvhozKAK6wemdgdoYEMlSFlC2J1vBRbwhISI+AT2xZzgghzgghzlAXAt+v0yPgoyqklBBS+MSW5Qw1IdEGHb5+y9L46aQmhDoGReaq+5qReWHUxn3+lvX4ffEFzornvDYB70kPCtzX74rZGVJbRVqhao2zitp1p1IMC6GGYhXerlJamDSkbId1aCdJGRJCCWJWWKdIQYXsNskdrrd3jU8htW9aEvLt6pRVa02evXjLirBt6ArhBL/q5u0kXoRQt61oh4xabmXm4i2rpNaO2Y05oaEkIbnZaIcMam5vQiTftrCVOWvV7tiOWtbkLWukGdZheZfBya4qBGtJOXlqGFaheZfRopXxtP/rpMRz40rya+V+dmuebCGAxh+uKFDk7NqE2tyQyPlCgF3DmQ23HQB6qLfeSFnRQR1MBkD+lhXwkC7arpBoCR/JVpUgNSSk0BnNZHjLCin/wbKgtAMgC8EGDCk6MgBWQzgDB//gZsbeslofcOWWtOYuWcDojSFG66YRuMqNo9Y2lTN8qNe4Qlus5igW0lsBJ0vpzU3aDmCoIVeUYikDEJ8hJdiZApxwrmAylGLUEwKcKsW6FTmqQoCeFGAXMZQtVzk+fSEARQrgVQz17DOIzkZIYjcxVBGAVWymQgCqlMRsORwJgHFc9kISXDGAlRyuBGBSTPOEJCRicriSJOHnTI5nvpDEqBhrFsWyTkjCm5jFcawXkrNKjqMIfAnJsZbjdNp+hbTgitpsevsJOZvb7RNih8WrHzPBbwAAAABJRU5ErkJggg=='

    srcGuardiaFinalAmunt = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASSSURBVHhe7ZxNbhQxEEZnuEK2rBDHQcpZkTgOYsWWMwA1aSeOY7t+7bK760mIXmR6Ot+b+uzMdHL/+59bsAzbCbnf78cRjd1eb8sK4QbPZVVRSwkZLaHFSnLchXhJaOEtx03IaiJKvMRMF6IV8efz1+PohaffP4+jN758/3Yc3W6/nn8cR3JmRjRNiEREGX4NTEgNiaRZUoYL4YqgSMiRCMnhyhktZqgQqgyuhBytkByOnFGxfTr+NwVEUGSACI0Ma0AkVaakgimYC9lRRAlVzAgpppWFXWAuIa8ajRzLygLy2krnwarMsr7MhEhl5EjEWAlphZ6fqyfGSoq6skBETwaETA0awm3JGgWEjE1Aoicay4GKSghnKjgkMSPlcETkYNOnlSIWopHBEWUtxmIiRkoRryG9J+UGzqE8d+3xtcA404AFnuidU7qmiIS0ZEgrCpCKwYSMEFHSeg6JFLaQETJyLOoJgp0hIsdKCkuIVU1RsBCDYSEiYVVfZCEzZZRYy7EUkWMhRS1ktIwcrZiaiDJErSytFJKQGTLKsHvnxsRAqHkwFBElGjGtc5sI8V7EseepPR4LE5OR8JAy5O13KpQKonwNB6oMgPO1JVKZXSEjp4MTtJUUScAaKTV6myOAPSGzZSSsJ2UGkilpCsFMBnJ62bImxGoh90BTPTPXkqqQkdOhqZ4da6tFK2PyhOw8Hd5wpuSDkDOuHRY7JevdFlDLmjQhVtNhUTm71hZ1SliLejCed0LOWFcrUZuSMnN0QmIxn0tU1mK8Com68iPPvjshUVf2YLutqKzFuIQQ7vtJNSzOQWGqEIsKPHuNRmU50Pt55CGktsM62ytRUzmz6gqYPiEa0VfY9UVlLcalhEiqZ2ZdAS5CJNVjVVecgGfLANwmhBOw9dpBCdpDBuBaWZSgrWUkIPBW6F4ygMetpCtse2ufBFKuofY4z0Cp1D4ShttMl1nUIfzy3xW51C5rB0LIYoSQxXgIqf3OwpnuEtyJmBAHWjssIIQsRghZjBCyGF0hsbDP51VIbacV2NNb0IGorMVAhURtzeWdkKitsWB1BURlLQZJSNSWHuqvxH0QErU1j1rW5MqKKZFDnQ6gKiSmxA/Woh5Twqc1Ha0XfffvZY26+WFnsdwbKLhCWBMCaMPcfco46wFXBtAV0ntgIAPLlD0hQKwlOJxJykGFtIxKpex+vxVlDZFUVUL1V0kB74BrLwzPOxd7k0ERQqqs3omivt7QygDIa0hI6WMhA2At6pwTBy9wM2PvslpPcOUp0SziJWwhQE/KlcSACEsZgEgIxhWk9NYMDWIh2CvgzFIwGdLpAFQTckUpI2UA6sqCC+hdxJmk9GRgOVAxW0MwKTuLARGYDCtMF3XswnYTg4kALGUApkIAygWuLoYiArCWAZgLAagXupoYqghghAyA9G6vht47xSWSd45rQq0+Zq0xOK7xQhIcMQmKIKkQjgRgUkzzhCQkYhI1QRQh3PBLZkY0XUhCI2YWHtG4CUmsJsY5Dn8hOZ5yVolhKSE5o+Us+m2vK6SGVNJG3+JeQs7P7fYPXyPi2dHHzlgAAAAASUVORK5CYII='
    srcGuardiaFinalAvall = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASMSURBVHhe7ZxLbhQxEIZnuEK2rBDHQeKsSBwHsWLLGQI1aSeO40c97XJ3fRJiRDQ9zv+5qnq6W9yf/3ML3LCVkPv9fryisdOecyuEGz4Wr5LcCLEW0MOTnOVCVoqosVrOEiHeJNRYJWaqEKmILz++Ha9e+P395/Hqjb+fvx6v3nj68+t4RWe2mGlCqDLK8GtghZRwBM0SYy6EIgIjIYcrpIQiyFqMmRBLEQktIQkPYj4df6uClQEiuDIsAJlYodJ52EJdCGah3kSUYMVYSFEVMlqgdxElGDHaUtSE9Ba2m4iSkRhNKWIhsJiRjLMwkqIhRiRktIAzyUhYtzC2kCvKSFhKUR3qiTPLSIykcGEJae0AEHEFGQmQ0hLDrRKykJ6Mq6IphSRE0huvCjUztJDega9cHYneTKFIQQkJGTg0pKCu9rYOhpFRuyK7C72Ae7SuGmOuEA8r5KoyAO6dRsmQJ59lAdGmxnCrqysE2/cCPKNMm0IkrSqxeyVxd3mC8/7mUNcQYo32LVwLqAO+WiE7yNgF6gZhDfVATmvTo4VEdfChVMkHIaOzgECPWtaoConqkIOtkpghzngnpFZCUR22lJlHhUwE07ZCiDNehUS7WkeefVTIZEZtK4Q4I4Q4I4Q44yEkBrofokIWUBvsqShCiDNCiDNCiDMuKQTuc5d/vPB4yGHVWVbtIQXK53IechiFj71vIaW2DnjwYVmFtJ5qhH9v/UwKphJWV8sSIZjAtaVQgl4pZboQStBaUjgBr5IyVQgnYO1K8c4lz7I8c3ohktazom1NEyJpPWdrWzXR6Vnfh5Dag79X691eOHXL0mg5s9vWFCEa1XaVij39UN+NrpCYI/qMWuCrkNpgD+aQZx8tyxkhZCKYM7Z3QuL7yHzKzKNCnIESsmuVaNz907qDiP2C+UGIxdmWxu3gMz64V8sa3bJilvChXH6pCrGoklVIWo7lAw+tjElDXVIlkpazc7uiXpxsCjlTlXijly2pQoAdZwmn9Wi0K2p1AF0h2lXCaT1a7YoSsKWMUabkCgFmzRLt2YEJWkOGBPP/BLPFSGrt2Pl74OejY/TCLXewpghudQAiIYB0F5ehjkRwmLnrJTIAlBDAUkoLqYgSazG9Ia4uBJglRVtEDW05GjIA0lCnHJgDiMDKkG4ACLAXohbUzEgVktAe8pSKyD+j9r6086lhSyqm9VmcDcwSAmi0L66IRE9IwlJM79jMWG2EAD0pUhEJjJCEtpjR8bhCWF8MgdEHtkLHygAR2ErDAAFr7X4rGQBbCMCV0kNbREkSQ5GTYykDEAkBYAG9RayqCAwUMSCiJ2OUAxb2DKmBnSu5JImEmmzuzgfywPPjWFdFjqoQYCQF0KoEbSElIxGAcnzyllWCWSAEiW1lKxi1p4S2DEBdCIBdqDcxFBEWMgD1llWCaWE5lHam0bIwAnKM47IXkqCKAUZyuEKoEoBJMc0TAnCklOSSMEI44edMjOfBVCE5GnIsWRTLOiEJb2IWx7FeSM4qOY4i8CUkx1qO01/br5AWVFGb/Xr7CTk3t9s/ZtKlO6f4RG0AAAAASUVORK5CYII='
    srcGuardiaFinalDreta = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASCSURBVHhe7ZxNjhQxDEanuQJbVojjIHFWJI6DWLHlDICbzpBJx4nt2ImT8pNGNKI6P371xdXqEbfff3kJ3LCdkNvt9nhFY7f7za0QbuG5eBXlSoi1BAxPcpYLWSUBY7WcZUK8iShZJWa6kFERvz58eryi8f7n98crGbPFTBMiEcEtPhWJpFlizIVwRVhJwODKsRZjJoQjYrYEDKocSykmQqgyvIgoWSlGXQhFhlcRJRQx2lJUhfRk7CKipCdGU4qakJaMXUXkzJIyLOTUVGBYi3n3+FPE1WQAvT1RemgLsZArykhYShlKCMbJMhJWexT1EOwOuIKIGlhfkfQTdkJCxjPY3iVHF0vIyNl4Vbg1IwtpDXzldCRaNeBIIQkJGTQ0ajH0lBUynsFqQk1JVwg2UMjAGZEiSkjIsKMphNOMgrdIU9L8YFh7867poHy3YbG32rytD4yoEK3ekS9otkyKBAyttXI/xbOEjMhIWEsZkYDBWXPtBqytCRNS7SG79g4LGQB13PK61vuwGpOfsqzv7FGsZCRGxufU7knIjumwlpFozSNZQ63WpIR4T4dX8rpRa0g+srwyKx2J2nyaa3gjROPJKvgHtW5lzbdPyGo46aBICiEGjJwqr0J2fLpaQV5srd6R176ZkB36xw5rzOmt94gja5YUyjyjazmmh1hLKce3etw+qqlbSaGOqzH/XchJnz9g3elnhNY4VukAjkpISauoNbjX53DeU7s2heL+fYhVQmp3ksa4K8HSwd1XbRz4juTohMxC8yYLIc5Aj6xgPnFkOSSEOCOEOCOEOANt6h+/fn68kvPjy7fHq/9ojLuafF/S/dRqE01dQFnIWmFHCCHOCCEKcFOCHVfA6+/2WvSR2sQrewilcJT1je6rJeT4hMDm0w8F7vUJ7vUYRwqRFrUEG8cy5ccJGZWAQRlXY+6jhFjJSOTjS1PSW+OrkNRUcqw3qMmstfbmkawjr/3xTd0Si15yhJDZSZamhLLOrpDZm92N0ZSUreKNkFofCWRIb2TSkRUpaUNJCbWGT0IiJX2ox1RPQq3W5KbuOSUWTztcWmvg1I4sxDuzpGjNg51EVSHYxd57ibWU3vjlv8PfuTU7JiEJKynUceG69CMB/b9OAOwX6KiT1e4O6UKljKR6dK3Y3I2StxPSeuMupLuVWlzu9Vx6NW0mBBhJiYeErEKSDqDbQ7ABKEdBWfyQ0T9xugkBWr+MfZUiU2ndqBQhpKes1kCUpFyFURkA+bE3pLTRkAGwPodwBg7+wa0ZSwiATXDllGB7l9zApKZeIxq93jGVw04IhSukxWqPYiG9O+BkKb29SdMBDCXkilIsZQDiHlJyhZ7SkqFURj0hQEsKsKsY61TkqAoBelKAXcRQjlzl8ukLAShSAK9iqL3PoHQ2QgCqFMCLGKoIwKhsdkISO4jxICJhLiTBEQNYyuEISEwq0zwhAFdKiVSSREBiYnnuTBWSGBUzgwVlubNESI43OYvLsV5Izio5jkrgS0iOtRyn2/YrpIZU0kZb3EvI+by8/AEyucmzLh9iHgAAAABJRU5ErkJggg=='
    srcGuardiaFinalEsquerra = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAR1SURBVHhe7ZxBbpQxDEY7XIEtK8RxkDgrEsdBrNhyhoLLZJqmcWI7duLk95MqZjFN/3wvX9wBidvzP54CN2wl5Ha73V/x2OnMuRUiDZ+KV0muhFhLwPAkZ7mQVRIwVstZJsSbiBoropkuZETE5+9f7694/Pr24/5KxsyIpgmRiJAKoMCVNEuKuRCOCEsBLThyrMWYCdlBRIkHMSZCqDK8iCihirGQoi6EIsOriBKKGG0pqkJ6MnYRUdIToylFTUhLxq4iSlpitKQMCzm1FRjWbflw/1PE1WQAvT1RZmgLsZArykhYShlqCMbJMhJWexTNEOwEXEFEDWyuSOYJuyEh4z3Y3iVXF0vIyN14VbiZkYW0Fr5yOxKtDDhSSEJCBg0NKaShji12FRn50KbseWTIdxsSMt6G2/ukDmDZUFrSbUhtEU0ZIxucQe35qM9T+95eS5oNod57XOBB0xcF7vs908sUbYj2VWUR5ozm1J6b83OxfWNNYX0OSaTTSg2Z+j4uVuuuhCUETkYZQi8U69C8S8HahN1AVSFas2NWWN6lcCA3pHVvegjEsxTOzHknpNcO6uInnVoralmTGkKREALaUA8ya6gnOBUM2pQteSNkdJhHS9pQDnK3IdgivcVnt+iU1oqurBbRkjEeQiTXlZeW7NSO2rPm2TcbIt1o3hLrsHaSQWH4yqIEYhXaaTIA9RmSKGcJhJe+RtBaxysqQrjhcEPlvn9nHv8eUhvqnACw3652D7G2L4091dYFFS8NGZUBXOH0zsBshgQyVIWULYnW8HmZIaN/hxXo8JghgR9CiDNCiDNCiDPQof7n05f7Kzoff/+8v3pFso4nrPZUWzeGukPUhNSMB3zUrqyRalNkrrr6llxZ8KKEc+I5703A96QvCtz374rZDKmdIq1QtdZZRe25UymGhVBDsQpvVykYJg0p22Ed2klShoRQgpgV1ilSmkJ22+QOz9t7xoeQ2m9aEvLr6pRTa02evfjKirBt6ArhBL/qw9tJvBFCvbaiHTJquZWZi6+sklo7ZjfmhIaShORmox0yqLm9EyL5bat1Mmed2h3bUcuafGWNNMM6LO8yONlVhbRaUm6eGoZVaN5lYGAZs/+vE60APDeuJH9W7s/G9skWAmj9W3sPipxdm1DbWyNyvhBg13Bmw20H0Bzq2DdSTnRQpyUDIP+WFfCQHtqukGgJH8lVlSA1JKTQGc1k+MoKKa+0sqC0AyALaS0YUnRkAKyGcBYO/sPNjH1lYT/gyi3B9i45wM0Phi2wD43AVT44al1TOcNDvcYV2mK1R7GQ3gk4WUpvb9J2AEMNuaIUSxmAeIaUtGYKcMJcaclQilFPCHCqFOtW5KgKAXpSgF3EUK5c5fj0hQAUKYBXMdTZZxCdjZDEbmKoIgCr2EyFAFQpidlyOBIA47jshSS4YgArOVwJwKSY5glJSMTkcCVJws+ZHM98IYlRMdYsimWdkIQ3MYvjWC8kZ5UcRxH4EpJjLcfptv0KweCK2mx7+wk5m6env3/wzoHccb4/AAAAAElFTkSuQmCC'

    srcGuardiaRastreAmunt = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASPSURBVHhe7ZxNUhsxEEbt3CDFlmUOlKPmQCzZpnKEJG1GIISk/pXUmulXlcos8Hj4nvuTsAfuf/9zC9ywnZD7/X4c0djt9eZWCDd4Ll5FuRIyWkILT3KWC1klocVqOcuEeBNRskrMdCFaEb+ffxxHbzy9vhxHH/x5/XUc3W7fn38eR3JmRjRNiEREGX4NTEgNiaRZUoYL4YqgSMiRCMnhyhktZqgQqgyuhBytkByOnFGxfTv+NwVEUGSACI0Ma0AkVaakgimYC9lRRAlVzAgpppWFXWAuIa8ajRzLygLy2krnwarMsr7MhEhl5EjEWAlphZ6fqyfGSoq6skBETwaETA0awm3JGgWEjE1Aoicay4GKSghnKjgkMSPlcETkYNOnlSIWopHBEWUtxmIiRkoRryG9J+UGzqE8d+3xtcA404AFnuidU7qmiIS0ZEgrCpCKwYSMEFHSeg6JFLaQETJyLOoJgp0hIsdKCkuIVU1RsBCDYSEiYVVfZCEzZZRYy7EUkWMhRS1ktIwcrZiaiDJErSytFJKQGTLKsHvnxsRAqHkwFBElGjGtc5sIWb2IY89TezwWJiYjsULKkLffqVAqiPI1HKgyAM7XlkhldoWMnA5O0FZSJAFrpNTobY4A9oTMlpGwnpQZSKakKQQzGcjpZcuaEKuFfAWa6pm5llSFjJwOTfXsWFstWhmTJ2Tn6VgNZ0q+CDnj2mGxU7LebQG1rEkTYjUdFpWza21Rp4S1qAfj+STkjHXlidqUlJmjExKL+VyispzxLiTqah159t0JibqyB9ttRWU54xJCuO8n1bA4B4WpQiwq8Ow1GpW1gN7PIw8htR3W2V6JmsqZVVfA9AnRiL7Cri8qyxmXEiKpnpl1BSwRIqkeq7riBDxbBrBsQjgBW68dlKBXyACWVhYlaGsZCQi8FfoqGcDjVlIP297aJ4GUa6g9bmWgVGofCcNtpm4WdQi//HdFLrXL2oEQ4owQ4oyHkNrvLJzpLsGdiAlZQGuHBYQQZ4QQZ4QQZ3SFxMI+n3chtZ1WYE9vQQeispyBConamssnIVFbY8HqCojKcgZJSNSWHuqvxH0RErU1j1rW5MqKKZFDnQ6gKiSmZB2sRT2mhE9rOlov+u7fyxp188POYrk3UHCFsCYE0Ia5+5Rx1gOuDKArpPfAQAaWKXtCgFhLcDiTlIMKaRmVStn9fivKGiKpqoTqr5ICqwOuvTBW3rnYmwyKEFJl9U4U9fWBVgZAXkNCSh8LGQBrUeecOHiDmxl7l9V6gitPiWYRL2ELAXpSriQGRFjKAERCMK4gpbdmaBALwV4BZ5aCyZBOB6CakCtKGSkDUFcWXEDvIs4kpScDy4GK2RqCSdlZDIjAZFhhuqhjF7abGEwEYCkDMBUCUC7QuxiKCMBaBmAuBKBeqDcxVBHACBkA6d1eDb13iksk7xzXhFp9zFpjcFzjhSQ4YhIUQVIhHAnApJjmCUlIxCRqgihCuOGXzIxoupCERswsVkSzTEjCm5jFcawXkrNSjpcYXAnJGS3H6bftV0gNqaSNvsW9hJyf2+0fvKPTjfCDUsIAAAAASUVORK5CYII='
    srcGuardiaRastreAvall = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASKSURBVHhe7ZxLbtwwDIZneoOg2yx7oB41B+oy26JHaMOplSiKHnxKlM0PKDpoMB7l/0TSYxu9/33jFrhhKyH3+/14RWOnPedWCDd8LF4luRFiLaCHJznLhawUUWO1nCVCvEmosUrMVCFSEX9eX45X/3l6/nm8+uD384/j1QffX38dr+jMFjNNCFVGGX4NrJASjqBZYsyFUERgJORwhZRQBFmLMRNiKSKhJSThQcy3429VsDJABFeGBSATK1Q6D1uoC8Es1JuIEqwYCymqQkYL9C6iBCNGW4qakN7CdhNRMhKjKUUsBBYzknEWRlI0xIiEjBZwJhkJ6xbGFnJFGQlLKapDPXFmGYmRFC4sIa0dACKuICMBUlpiuFVCFtKTcVU0pZCESHrjVaFmhhbSO/CVqyPRmykUKSghIQOHhhTU1d7WwTAyaldkd6EXcI/WVWPMFeJhhVxVBsC90ygZ8uSzLCDa1BhudXWFYPtegGeUaVOIpFUldq8k7i5PcN7fHOoaQqzRvoVrAXXAVytkBxm7QN0grKEeyGlterSQqA4+lCr5ImR0FhDoUcsaVSFRHXKwVRIzxBmfhNRKKKrDljLzqJCJYNpWCHHGu5BoV+vIs48KmcyobYUQZ4QQZ4QQZzyExED3Q1TIAmqDPRVFCHFGCHFGCHHGJYXAfe7yjxceDzmsOsuqPaRA+VzOQw6j8LH3LaTU1gEPPiyrkNZTjfDvrZ9JwVTC6mpZIgQTuLYUStArpUwXQglaSwon4FVSpgrhBKxdKd655FmWZ04vRNJ6VrStaUIkredsbasmOj3r+xBSe/D3ar3bC6duWRotZ3bbmiJEo9quUrGnH+q70RUSc0SfUQt8F1Ib7MEc8uyjZTkjhEwEc8b2SUh8H5lPmXlUiDNQQnatEo27f1p3ELFfML8IsTjb0rgdfMYH92pZo1tWzBI+lMsvVSEWVbIKScuxfOChlTFpqEuqRNJydm5X1IuTTSFnqhJv9LIlVQiw4yzhtB6NdkWtDqArRLtKOK1Hq11RAraUMcqUXCHArFmiPTswQWvIkGD+n2C2GEmtHTt/D/x8dIxeuOUO1hTBrQ5AJASQ7uIy1JEIDjN3vUQGgBICWEppIRVRYi2mN8TVhQCzpGiLqKEtR0MGQBrqlANzABFYGdINAAH2QtSCmhmpQhLaQ55SEfln1N6Xdj41bEnFtD6Ls4FZQgCN9sUVkegJSViK6R2bGauNEKAnRSoigRGS0BYzOh5XCOuLITD6wFboWBkgAltpGCBgrd1vJQNgCwG4UnpoiyhJYihycixlACIhACygt4hVFYGBIgZE9GSMcsDCniE1sHMllySRUJPN3flAHnh+HOuqyFEVAoykAFqVoC2kZCQCUI5P3rJKMAuEILGtbAWj9pTQlgGoCwGwC/UmhiLCQgag3rJKMC0sh9LONFoWRkCOcVz2QhJUMcBIDlcIVQIwKaZ5QgCOlJJcEkYIJ/ycifE8mCokR0OOJYtiWSck4U3M4jjWC8lZJcdRBL6E5FjLcfpr+xXSgipqs19vPyHn5nb7B+cOsyNm3m6HAAAAAElFTkSuQmCC'
    srcGuardiaRastreDreta = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAASASURBVHhe7ZxNjhQxDEanuQFiy5IDcVQOxHK2iCMA7ukMmXSc2I6dOCk/aUQjqvPjV19crR5x+/OPl8AN2wm53W6PVzR2u9/cCuEWnotXUa6EWEvA8CRnuZBVEjBWy1kmxJuIklVipgsZFfHr67fHKxpfXn8+XsmYLWaaEIkIbvGpSCTNEmMuhCvCSgIGV461GDMhHBGzJWBQ5VhKMRFCleFFRMlKMepCKDK8iiihiNGWoiqkJ2MXESU9MZpS1IS0ZOwqImeWlGEhp6YCw1rMp8efIq4mA+jtidJDW4iFXFFGwlLKUEIwTpaRsNqjqIdgd8AVRNTA+oqkn7ATEjKewfYuObpYQkbOxqvCrRlZSGvgK6cj0aoBRwpJSMigoVGLoaeskPEMVhNqSrpCsIFCBs6IFFFCQoYdTSGcZhR8RJqS5gfD2pt3TQfluw2LvdXmbX1gRIVo9Y58QbNlUiRgaK2V+ymeJWRERsJayogEDM6aazdgbU2YkGoP2bV3WMgAqOOW17Xeh9WY/JRlfWePYiUjMTI+p3ZPQnZMh7WMRGseyRpqtSYlxHs6vJLXjVpD8pHllVnpSNTm01zDByEaT1bBG9S6lTXfPiGr4aSDIimEGDByqrwL2fHpagV5sbV6R177ZkJ26B87rDGnt94jjqxZUijzjK7lmB5iLaUc3+px+6imbiWFOq7G/HchJ33+gHWnnxFa41ilAzgqISWtotbgXp/DeU/t2hSK+/chVgmp3Uka464ESwd3X7Vx4DuSoxMyC82bLIQ4Az2ygvnEkeWQEOKMEOKMEOIMtKn/fv3xeCXn89fvj1f/0Rh3Nfm+pPup1SaauoCykLXCjhBCnBFCFOCmBDuugPff7bXoI7WJV/YQSuEo6xvdV0vI8QmBzacfCtzrE9zrMY4UIi1qCTaOZcqPEzIqAYMyrsbcRwmxkpHIx5empLfGdyGpqeRYb1CTWWvtzSNZR17745u6JRa95Aghs5MsTQllnV0hsze7G6MpKVvFByG1PhLIkN7IpCMrUtKGkhJqDZ+EREr6UI+pnoRarclN3XNKLJ52uLTWwKkdWYh3ZknRmgc7iapCsIu99xJrKb3xy3+Hv3NrdkxCElZSqOPCdelHAvp/nQDYL9BRJ6vdHdKFShlJ9ehasbkbJW8npPXGXUh3K7W43Ou59GraTAgwkhIPCVmFJB1At4dgA1COgrL4IaN/4nQTArR+GfsqRabSulEpQkhPWa2BKEm5CqMyAPJjb0hpoyEDYH0O4QwcvMGtGUsIgE1w5ZRge5fcwKSmXiMavd4xlcNOCIUrpMVqj2IhvTvgZCm9vUnTAQwl5IpSLGUA4h5ScoWe0pKhVEY9IUBLCrCrGOtU5KgKAXpSgF3EUI5c5fLpCwEoUgCvYqi9z6B0NkIAqhTAixiqCMCobHZCEjuI8SAiYS4kwREDWMrhCEhMKtM8IQBXSolUkkRAYmJ57kwVkhgVM4MFZbmzREiONzmLy7FeSM4qOY5K4EtIjrUcp9v2K6SGVNJGW9xLyPm8vPwFLOKkJxsmrRkAAAAASUVORK5CYII='
    srcGuardiaRastreEsquerra = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAARzSURBVHhe7ZxBbpQxDEY73ACx7ZIDcVQOxLJbxBGgLpNpmsaJ7diJk99PqpjFNP3zvXxxByRuf195CtywlZDb7XZ/xWOnM+dWiDR8Kl4luRJiLQHDk5zlQlZJwFgtZ5kQbyJqrIhmupAREX9eft5f8fj6/OP+SsbMiKYJkYiQCqDAlTRLirkQjghLAS04cqzFmAnZQUSJBzEmQqgyvIgooYqxkKIuhCLDq4gSihhtKapCejJ2EVHSE6MpRU1IS8auIkpaYrSkDAs5tRUY1m35cv9TxNVkAL09UWZoC7GQK8pIWEoZagjGyTISVnsUzRDsBFxBRA1srkjmCbshIeMz2N4lVxdLyMjdeFW4mZGFtBa+cjsSrQw4UkhCQgYNDSmkoY4tdhUZ+dCm7HlkyHcbEjI+htv7pA5g2VBa0m1IbRFNGSMbnEHt+ajPU/veXkuaDaHee1zgQdMXBe77PdPLFG2I9lVlEeaM5tSem/NzsX1jTWF9Dkmk00oNmfo+LlbrroQlBE5GGUIvFOvQvEvB2oTdQFUhWrNjVljepXAgN6R1b3oIxLMUzsz5JKTXDuriJ51aK2pZkxpCkRAC2lAPMmuoJzgVDNqULfkgZHSYR0vaUA5ytyHYIr3FZ7folNaKrqwW0ZIxHkIk15WXluzUjtqz5tk3GyLdaN4S67B2kkFh+MqiBGIV2mkyAPUZkihnCYSXvkbQWscrKkK44XBD5b5/Zx7/HlIb6pwAsN+udg+xti+NPdXWBRVvDRmVAVzh9M7AbIYEMlSFlC2J1vB5myGjf4cV6PCYIYEfQogzQogzQogz0KH++/n7/RWdby+/7q/ekazjCas91daNoe4QNSE14wEftStrpNoUmauuviVXFrwo4Zx4znsT8D3piwL3/btiNkNqp0grVK11VlF77lSKYSHUUKzC21UKhklDynZYh3aSlCEhlCBmhXWKlKaQ3Ta5w/P2nvEhpPabloT8ujrl1FqTZy++siJsG7pCOMGv+vB2Eh+EUK+taIeMWm5l5uIrq6TWjtmNOaGhJCG52WiHDGpun4RIfttqncxZp3bHdtSyJl9ZI82wDsu7DE52VSGtlpSbp4ZhFZp3GRhYxuz/60QrAM+NK8mflfuzsX2yhQBa/9begyJn1ybU9taInC8E2DWc2XDbATSHOvaNlBMd1GnJAMi/ZQU8pIe2KyRawkdyVSVIDQkpdEYzGb6yQso7rSwo7QDIQloLhhQdGQCrIZyFg/9wM2NfWdgPuHJLsL1LDnDzg2EL7EMjcJUPjlrXVM7wUK9xhbZY7VEspHcCTpbS25u0HcBQQ64oxVIGIJ4hJa2ZApwwV1oylGLUEwKcKsW6FTmqQoCeFGAXMZQrVzk+fSEARQrgVQx19hlEZyMksZsYqgjAKjZTIQBVSmK2HI4EwDgueyEJrhjASg5XAjAppnlCEhIxOVxJkvBzJsczX0hiVIw1i2JZJyThTcziONYLyVklx1EEvoTkWMtxum2/QjC4ojbb3n5Czubp6R8CP/QN6MxuJAAAAABJRU5ErkJggg=='

    srcGuardiaRastreAmuntFinal = 'data:image/png;base64, '
    srcGuardiaRastreAvallFinal = 'data:image/png;base64, '
    srcGuardiaRastreDretaFinal = 'data:image/png;base64, '
    srcGuardiaRastreEsquerraFinal = 'data:image/png;base64, '

    srcGuardiaVisio = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAANDSURBVHhe7Z0xdhsxDESl1LlwmhRpfOH0SeCI9nqXIAGQIMHl/MaqpMf5HEAuJD3//OMBwrCckOfz+XokY7X7FlaINngtUUWFEuItgSOSnOlCZkngmC1nmpBoIs7MEjNcSKuI37/eXo9kfP/54/XIzsiIhgmxiNCGL8UiaZQUdyFaEV4SOLRyvMW4CpHKGC2BQyPHKzYXIauJOCMV4yGluxCJjKgizkjE9JbSVUhNxioiztTE9JTSTchdZRwpieklpVnIDiKOeLfl2+uvid1kELUzSXZoCbOQHWUkPKU0NYTjzjISXmc07RDuBuwgIge3Vyz7RN0QyLjCnd0yulRCWmbjrmgzEwspPfHO7UiUMtBIaV7qkPFJDykiIdyTQcaV1kyqQiBDD5eNpCXNIwvksV7YohC0oz+1lqgbAhlyLFmxQiTzDtgoZatqCNqhR5tZVgja4Q+XsbghaIcdTXYXIWjHOHJZixqCdrQjzVC11IE/X4RgXPmSa8k582pDMK7GgpEVjA8hGFfzOGZfbAjGVX9qmWJkBQNCggEhwYCQCZT+H3kXknuHhYU+BzQkGBASDAgJBoQEA0KCASHBgJBgQEgwICQYEBIMCAnGu5Dcp0UlX7wC+oOGTCB32VMpICQYEBIMCAlGUQgW+3g+hFi+lwPoKS10AiMrGFUhGFtj+SIEY8uX2rgiMLKCIRKCsdWONMOLEIytceSyFo8stMSOJrusELRkHqqljpbo4TLjLj0rBC2Zg6ohBFoiR9sOoigELelPLVN1Qwi0pI41o6oQziik8FhGVcLUkASkXGnNRCSkZBZSPillId3H4oZASpkeMgjVyNI8MfiPNjP1DuFeYOeWcGe3XGDzb1CVvhtll0/w9hpTR5reZXHs0BavM5qF1G7AnaXUzmZtB9HUkB2leMoghvyw5F12SklGpxj7CSFKUohVxXi34khXIURNCrGKGMnI7RxffyGERAoRVYx09zlE5yOEkEohooiRiiCcYvMTklhBTAQRCXchCY2YhKcgjQRiUEzjhCQsYhJWQdrwz4yMaLiQRIuYUcyIZpqQRDQxk+OYL+TITDlRYggl5Ii3nKDHjiskh1XSQkdcS8j9eTz+AhFIwD3DhsrvAAAAAElFTkSuQmCC'
    srcGoalGuardiaVisio = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAOHSURBVHhe7dy9cdwwEIbhO8euwvV4xvU4ceDE9XjG9bgK57JWIiSIB2B/sACW5PcmYkRReG6BU8L703M3FKbDgdzv9+1K1tE+b2FBtAuvLSpUKJDRCLUi4SwHWYVQazXOMpBoEPtWwUwH6YX48vvrdnW7/f32Z7t679/PX9vVa59/fN+u7M1comkgFoh88UtJQEpZkGahDAfRQnAIeVaQPC3OaJihIFIMDUKeB0ieBmfUsn3afrpGEBIMgrBijIgwpaCWLViSO8gRIfZJYUaguIJwDxgdYp8ExhvFDUSCcdQ4GE+UbhB6mNYDHW0qWnEoHjBdINwDnAUib/QWZga5IkZqJIrroZ46M0aKQ7FmAql9As50XkgilBqMdUrUIC2Mq+aJogLp2RuvmnbNxCCtG195OlKtM0WD0n2oA+M9DxQRSO1mwHishSKJBQGGvp5DvnvLQuWsk9IEwXT4x02JekKAIc8yJVUQyX6HbLXWVjUhmA592ikpgmA6xldbY/GEYDrsaabkAQTTMa/SWosmBNPRn3RKVIc6Gt8HEGxXYytNyX7N2QnBdjU3bFnBegPBdrWufO2bE4Ltyj/u2xa2rGABJFgACRZAFtT6f+QFpPQNCwf6mjAhwQJIsAASLIAECyDBAkiwABIsgAQLIMECSLAAEqwXkNKrhkqvPkLjw4QsqPRerjQUAAkWQIIFkGA1QXCwz+8NZOC7MFFW60CnsGUFiwXBtjW3DyDYtsbGbVcUtqxgiUCwbfUnfWv2Awi2rXmV1lq8ZWFK7GneKV8EwZSsS3WoY0r01aaj9qGvgmBK1qSaEApTIk87HVQTBFPiH7em6gmhMCV8mm9WeSxITRQo9SxbVco0ISmgPGadjJQIpCULlPdaGNLzWDwhQGnngUGptizNjdFr2jVTnyG1X3DlKek5xPeZDvUWypVgCMITgzKBcF0BpXVm9GQG4T4BZ0bhMKzTQXVNyBVRRmJQ3VsWPUDrIc6E0sLg1kGa2xnCoRwZhiA4DK9cD3XuwY4Gw0FQnhiUKwglecDoMBIIyhuDcgehpA8aDUYKQY3AoO7PNx5z5y3NyzW1r4QqYWres56SIlCDl2s8SMry1lMOqAdEg0BNWqZ5ICkLTGoPJAXRLv6+mUs0HSTVAzOrFUuzDCQVDWbxcqwHyVuJE2UZQoHkjcYJ+mfHBSllRTrQn3gskPN3u/0H5gDJfPTuB9gAAAAASUVORK5CYII='
    srcRastreFinal = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAANCSURBVHhe7Z1BVuswDEUbFvC3w/6HbIcN8BHUEBLLlmTLVuJ3J3TUHr/rJ5VB2+3jkwcIw+WEbNv2fCTjavctrBBt8FqiigolxFsCRyQ504XMksAxW840IdFEHJklZriQVhEfb/+ej2Rsr+/PR3ZGRjRMiEWENnwpFkmjpLgL0YrwksChleMtxlWIVMZoCRwaOV6xuQi5mogjUjEeUroLkciIKuKIRExvKV2F1GRcRcSRmpieUroJuauMPSUxvaQ0C1lBxB7vtrw8/5pYTQZRO5Nkh5YwC1lRRsJTSlNDOO4sI+F1RtMO4W7ACiJycHvFsk/UDYGMM9zZLaNLJaRlNq6KNjOxkNITr9yORCkDjZTmpQ4Zv/SQIhLCPRlknGnNpCoEMvRw2Uha0jyyQB7rhS0KQTv6U2uJuiGQIceSFStEMu+AjVK2qoagHXq0mWWFoB3+cBmLG4J22NFkdxKCdowjl7WoIWhHO9IMVUsd+PNHCMaVL7mWHDOvNgTjaiwYWcH4EYJxNY999sWGYFz1p5YpRlYwICQYEBIMCJlA6f+RLyG5d1hY6HNAQ4IBIcGAkGBASDAgJBgQEgwICQaEBANCggEhwYCQYHwJyX1aVPLFK6A/aMgEcpc9lQJCggEhwYCQYBSFYLGP50eI5Xs5gJ7SQicwsoJRFYKxNZY/QjC2fKmNKwIjKxgiIRhb7UgzPAnB2BpHLmvxyEJL7GiyywpBS+ahWupoiR4uM+7Ss0LQkjmoGkKgJXK07SCKQtCS/tQyVTeEQEvqWDOqCuGMQgqPZVQlTA1JQMqZ1kxEQkpmIeWXUhbSfSxuCKSU6SGDUI0szRODb7SZqXcI9wIrt4Q7u+UCm3+DqvTdKKt8grfXmNrT9C6LY4W2eJ3RLKR2A+4spXY2azuIpoasKMVTBjHkhyXvslNKMjrF2E8IUZJCXFWMdyv2dBVC1KQQVxEjGbmd4+svhJBIIaKKke4+h+h8hBBSKUQUMVIRhFNsfkISVxATQUTCXUhCIybhKUgjgRgU0zghCYuYhFWQNvwjIyMaLiTRImYUM6KZJiQRTczkOOYL2TNTTpQYQgnZ4y0n6LHjCslhlXShI15LyP15PP4DjJXAPW5sT6EAAAAASUVORK5CYII='
    srcRastreFinalGuardiaVisio = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAOBSURBVHhe7dw9dtswEEZRK3VOtpO1pUmRJmvLdnLSOxqbsGAKwPxgAAzJ7zVmRdO4GkBueHu994LCdDiQ2+22Xck62uctLIh24bVFhQoFMhqhViSc5SCrEGqtxlkGEg1i3yqY6SC9EK9/vm1X93t9/7tdPfr36/d29d7Xnz+2K3szl2gaiAUiX/xSEpBSFqRZKMNBtBAcQp4VJE+LMxpmKIgUQ4OQ5wGSp8EZtWxftp+uEYQEgyCsGCMiTCmoZQuW5A5yRIh9UpgRKK4g3ANGh9gngfFGcQORYBw1DsYTpRuEHqb1QEebilYcigdMFwj3AGeByBu9hZlBroiRGonieqinzoyR4lCsmUBqn4AznReSCKUGY50SNUgL46p5oqhAevbGq6ZdMzFI68ZXno5U60zRoHQf6sB45IEiAqndDBjPtVAksSDA0NdzyHdvWaicdVKaIJgO/7gpUU8IMORZpqQKItnvkK3W2qomBNOhTzslRRBMx/hqayyeEEyHPc2UPIFgOuZVWmvRhGA6+pNOiepQR+P7BILtamylKdmvOTsh2K7mhi0rWB8g2K7Wla99c0KwXfnHfdvClhUsgAQLIMECyIJa/4+8gZS+YeFAXxMmJFgACRZAggWQYAEkWAAJFkCCBZBgASRYAAkWQIL1BlJ61VDp1UdofJiQBZXey5WGAiDBAkiwABKsJggO9vl9gAx8FybKah3oFLasYLEg2Lbm9gkE29bYuO2KwpYVLBEItq3+pG/NfgLBtjWv0lqLtyxMiT3NO+WLIJiSdakOdUyJvtp01D70VRBMyZpUE0JhSuRpp4NqgmBK/OPWVD0hFKaET/PNKo8FqYkCpZ5lq0qZJiQFlOesk5ESgbRkgfKohSE9j8UTApR2HhiUasvS3Bi9p10z9RlS+wVXnpKeQ3yf6VBvoVwJhiA8MSgTCNcVUFpnRk9mEO4TcGYUDsM6HVTXhFwRZSQG1b1l0QO0HuJMKC0Mbh2kuZ0hHMqRYQiCw/DK9VDnHuxoMBwE5YlBuYJQkgeMDiOBoLwxKHcQSvqg0WCkENQIDOp2v/GYO29pXq6pfSVUCVPznvWUFIEavFzjQVKWt55yQD0gGgRq0jLNA0lZYFJ7ICmIdvH3zVyi6SCpHphZrViaZSCpaDCLl2M9SN5KnCjLEAokbzRO0D87LkgpK9KB/sRjgZy/l5f/MkrJfKE8DtgAAAAASUVORK5CYII='
    srcRastre = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMpSURBVHhe7ZxBdhwhDAU9uUH2OVSOmkNlnyNM5Kd+7TZIQgJBN6DaeDbQ/JovxguPX+/3+yPQ8QhZr9freMXziHOOP4RGjYYbTj7skV6OcsZF6P2kfo5yumfp94CRmq50TNRja6umf3//HK94fv76fbxS4x7NWZZSk8aOjNKdczqv7TSa2h3laKy5ZXTZSDbVw1FO0Vp70lZZT9B0RVbWGrZlvWBqvKYrgrKmvNWLOVP3arrCKauPXLfy+aZOSGWVqa3LJtJ04lWxH8dPHTOaArjjCXcuiUHWpKYQF1+2ZuVMYQppP6r2zsrfgYk0JeRXmFKCqlkrmQLywyuHsSzLNNXzoolZkEVuMXWtEDJC0Zf5gl/AFFLhS5KVr1zGFGKNw8pa3hSShxLKZR7D9dCXgJa1Sa04uHKpmrW8KWVAQpYwtPtASig3a5MB1MRMZUWtTnIVhWZtda8Xw36TFbVKSIRIzdqqVogcuXzBBydfsmIGkaRcVy1sszacwSIxhgYOWTGDAqcculmbzyAXP8bQQMgyELIMhCwa8retT1nJR2H8hsURzTIQsgyELAMhy0DIMhCyDIQsAyHLQMgyELIMhCwDn7KSv9UVviW0OdEsmqQx2KeQZSBkGQhZBmhZcceTHLKs37xbG/J2B2IMDbCyYhJzvmTFJCLcDAIxhgYkWRtOohz5m6yYxIRESGEMtypXMWwqK8olUL7gNylXHjPvDSErysVRbhawfLk0tQJoWZuXi4uvahawcLn00VhZud0lfSkHENE2C1nMlzWOJIt0vIwvMoh8WReataqvClNAeQyLW6yBJqbqzso3mrpc+eGVhTD8zz/y+z1z/Wlz3fSd2D4NcyaqWPtRDbK4d2AKX9wh9bUCbM2a1JeLKcDzn7o+8/4iTVWmrlsGkL6A5yjzKtRJvSyA8wXcq0y4FprytiwGBF/AeGXy7dkatnE9IPsCxiiTNQEOSdu3QG5UNkAT4iYLKSpDXMQVHQHO6Xy3Q5TKEL04jZ0r7tG6yEJMynzpFKqjLGSksu5Zej/gpKu1MSnGyTrxsnbDycc/MkHv7v6j3n6Cafj4+A/ICKFcffShfgAAAABJRU5ErkJggg=='
    srcRastreGuardiaVisio = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAOESURBVHhe7dw9YtQwEIbhXWoaeg7FdWgoaLgOh6KnoQ+ZxEoUr6T50Uga29/bxJXj6NmRNo3vT8/dUJgOB3K/37crWUf7vIUF0S68tqhQoUBGI9SKhLMcZBVCrdU4y0CiQexbBTMdpBfi75/f29Xt9uXrt+3qvX8/f21Xr33+8X27sjdziaaBWCDyxS8lASllQZqFMhxEC8Eh5FlB8rQ4o2GGgkgxNAh5HiB5GpxRy/Zp++kaQUgwCMKKMSLClIJatmBJ7iBHhNgnhRmB4grCPWB0iH0SGG8UNxAJxlHjYDxRukHoYVoPdLSpaMWheMB0gXAPcBaIvNFbmBnkihipkSiuh3rqzBgpDsWaCaT2CTjTeSGJUGow1ilRg7QwrponigqkZ2+8ato1E4O0bnzl6Ui1zhQNSvehDoz3PFBEILWbAeOxFookFgQY+noO+e4tC5WzTkoTBNPhHzcl6gkBhjzLlFRBJPsdstVaW9WEYDr0aaekCILpGF9tjcUTgumwp5mSBxBMx7xKay2aEExHf9IpUR3qaHwfQLBdja00Jfs1ZycE29XcsGUF6w0E29W68rVvTgi2K/+4b1vYsoIFkGABJFgAWVDr/5EXkNI3LBzoa8KEBAsgwQJIsAASLIAECyDBAkiwABIsgAQLIMECSLBeQEqvGiq9+giNDxOyoNJ7udJQACRYAAkWQILVBMHBPr83kIHvwkRZrQOdwpYVLBYE29bcPoBg2xobt11R2LKCJQLBttWf9K3ZDyDYtuZVWmvxloUpsad5p3wRBFOyLtWhjinRV5uO2oe+CoIpWZNqQihMiTztdFBNEEyJf9yaqieEwpTwab5Z5bEgNVGg1LNsVSnThKSA8ph1MlIikJYsUN5rYUjPY/GEAKWdBwal2rI0N0avaddMfYbUfsGVp6TnEN9nOtRbKFeCIQhPDMoEwnUFlNaZ0ZMZhPsEnBmFw7BOB9U1IVdEGYlBdW9Z9ACthzgTSguDWwdpbmcIh3JkGILgMLxyPdS5BzsaDAdBeWJQriCU5AGjw0ggKG8Myh2Ekj5oNBgpBDUCg7o/33jMnbc0L9fUvhKqhKl5z3pKikANXq7xICnLW085oB4QDQI1aZnmgaQsMKk9kBREu/j7Zi7RdJBUD8ysVizNMpBUNJjFy7EeJG8lTpRlCAWSNxon6J8dF6SUFelAf+KxQM7f7fYfP53JfDMogeAAAAAASUVORK5CYII='
    srcFlechaArriba = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAO+SURBVHhe7Z3bbmMxCEWb+f9/7oyr0jlNjA0Y8PYJ6yWVmprLMnaUVMrj8x8fBQzHCXk8Ht8/yThtv8EK0TZeC6ooKCHREjiQ5GwXsksCx24524SgiXhml5h0IasitOl6iM9sUZoQS2OiUkPK5ZlwIdritelc17eUEp2fllAh0mKtKfTWXylHIyeqbSFCokU0RjFWS8rIn8NdiKSYjIZ5lJUV54qrkFkBWU0ivErLqIv48/24DJqMhvb5HC33Uf5ecRrLE5K1e0ZxWozZ772IrndpQlBkXB97zPLUMKtpNZZZCJIM4g5S3O6QKztkEChSrJjuEK4wzyQtMq6s/r0Gz36oJ+QEGY3R80brW+BiWeKohHgX0sNDBpEphUMbRyzEs1EcETGypHjFWb7UkWUQJ0kRCeEWO0EGgSBFwlTIHWQQu6VIYiwfWStkyiB2S5kxFMIl6NGsHTKILCk9ZuurJ+R0GUSGFEstrJConYIgg8iQ0mO0tmpCVhuGJIOIlqKtqyskYncgyiCipfTg1hVPyErTkGUQkVI0Nb4I8d4RJ8ggIqX06K0pmhBr406SQURJkdarutQ1nCiDiJIi4ZcQr2AnyyAipPTWfF5rOiHaBt5BBhEhZYbrkXUnGUS2lB8hq4vfUQYRLeW6xs8/OfQWljbSIykt0U3SIO0TMep12Kusd8JzA5QQMFyEaEe24HGbkHeWoq2993w69r4u9dElg4A2P/R6GlyOdYeAUULAKCFglBAwSggYJQSMEgJGCQGjhIBRQsAoIWB8Cem9z9N7r6WIpyZkA6M3P0sIGCUEjBICxlBIXez5/AhB+0Ttrsw+zawjC4ypkDq2cvklpI6tWGbHVaOOLDBEQurYWkfawxchdWzl0eu1+MiqKbGj6V1XSE3JPlSXek2JHq5n3KZnhdSU7EE1IY2aEjna6WgMhdSU+DPrqXpCGjUlc6w9mgrhjJYUHstRRZgmhCgpr6z2RCRkZLak/GfUC+l9LJ6QkjLGQ0ZD/e0IXGDlMio8hEfm1/Dqi/oO4QK885R4blLTpT6S8k5iRvVaJ3LpVRbHO0iJqtEsZLYDPBO27jZi9e+fmdW2Eu+Yr81DIbreZSHEKNG7SMmo0U1I467TklmXq5DGLPnGKWJ21OIupCEppIEqZmf+IUIa0qIaKGIQcg4TQpwgBinHcCGEpmgiMjVtPlmbJU0IYRFDWFNdidnIbFG6EGK1SRnsaM02IQSamM3t2C/kyk45KG2AEnIlWg5o2bhCelglHVTiWULuz8fHX/n5kUvUSFAfAAAAAElFTkSuQmCC'
    srcFlechaIzquierda = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAPWSURBVHhe7Z3bbhsxDAXj/v8/t6UTJRtZpHiVKC8HCNIXe3nOmJKBFujj738+ijQcJeTxeHz9ScZJn7m0QrTlc8kqKZWQaAkYmeRsF7JLAsZuOduEZBMxYkc1y4VYRGhHtcpfWdEyIZpSIkeTzrNKSrgQSfBVoXsyzRgm5AQRPRlmDhHCDZZFRM/O+d2FcMJkFdGzI4urkFmAU0T0rMzlJoQa+lQRPSsymoW861ZgROf98/Vbxd1kALNMs05mqIXcUUYjUoppQzDeWUYjKqPqDsE+ARFDXp+VVbRnH+INWSUDntM/C3v2brDsmnlFQlYVkrV4DdIsbCHUG3tux6kyqA4kmVhCSgYPDymmb1kl4xVrJ1MhWFElAwfrhpNTtSElY462I1JIdFnU+3tKz8SsU1QI9kKvou4gA8tBZTdd6lruuBlcREI8yrqbDOmWDIVQpVmozZjD3hBrYXeWIcn3IiRiO2ozxox6YW2IpbSS8Qk3q+hSl1Iy5vQd/RJCFSilZLzCyT3dEE15JUOP+5FVMmx8C/E4rkrGnFEP197IDZGUWDJ8cDmySoYfZiElw5fvf5c1KnZWaLQM6v2zwslNda3ekNqMMZwP0aif9rqnEMrYiJIRh3hDSkYsIiElI57npc45skrGGE53I7DXsTakZKxjKqRkrEV8qTdKRgxqIdTmFHqmQqhNKCn+sDakpKyD/bUXWH3Bnyqb0wXWuegOoR5Um+LDU4hkG0pKLKpvWSXFBnZcASohQEkZQ/XCwfQXVABVvnk45UzZCdmQBlXQnTdFCymEW2hJ4TPr41uI9SgoKXqu3ZmPrCslxc5UiLTIkmLjlxDrsdUoKWNG2fuuXI+sKyVFB0uItsCS8gM374sQr2OrUVJwRt2wjyxLeXeXIsk4FOK9JUBtym+wPkSXurW4O0qR5kKFRGwJUJtCdyDaEMCjtLtI0WQhhWDFlRQ9VG5AvCGevLMU7fxTIZFbAsw+MSeCdcPJytqQksLH2on5yCopP1BdcPOxhVBvWFJ8ZACiDVlR2MlSRkjziI8s7AFeWwJgz8gqC8uumVf1/4cAXitKcX1GRhkRHZgv9RFe2wKh2k82vDL2qIXMSooaOAOzbJYPkGlD7iglUgagvkN6ogfNAJXRK5/bHTIb6ORtgdlXyADcNqTBKd75kWHsyOIuBOBuQ1YxO+cPEdI4TQx3XiBq5lAhgCQksFpOtvnChTSkwYGo0TLN0rNMSENTxhXpuKufZ2W5kIa1qGg21bJPSCObmM117BdyZZecRBXkEnIlWk7S2HmFYEhFHRbvPCHvzcfHPzNPqj06YgpzAAAAAElFTkSuQmCC'
    srcFlechaDerecha = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAPuSURBVHhe7Z2JblwhDEUz/f9/butRGJEXMN4xy5GqLsoD2+ddGKmR8vr7n69LGpYT8nq9vv9EY7X3La0Q7uC5ZBWVSoi3hB6Z5EwXMktCj9lypgnJJuLJLDHhQrQiuOVG76clTIhkMF6lZarlibsQbvNRjRey1ecmhNNotIQe1Jo963URkqExDTPrNxdCaSariCczejEVMmpgFRFPIvv68/27GqxoKHhVGcCodkqSqKgTsmsqenj3q0rIaTKAUU/atIiFnCij4CnF7A6pySgDhlR+WeDVo+gO6TWVUQTQqteyVst5sBOygwyg9+8Ser1L9mAJsWwiAxH9cPcgC8EWzpoOClZSsBlw9iAJ2VVGIUIKFdWnrB1kFLylUNcfCukttJOMQgYpooSsLgOr30qKFFTI7OI88ZYiTQk7Iauno2aWFIyukJ3TUeMtpQW2LishO6WjxlMKd2ZNIaekoyY6Kb01yQnZNR01XlI4s/sl5MR01EQmpbUeKSEnpKPGQwp1hqxL/SQik1LzQ0hro9PSURMh5bnOTcgASymUl/sKIRB5fH2EWC+8G55S6ufRhFAidhIWUkYzvUcWE+/j6/NtQK3FRjYBiyKiofQ1Aut7tD42a1VCVpRhBTZ0zVzeQjBjlz4eUu4dokQipfVM+dorxADLpLwvdemRJX1uV7DhP+fSm91NiCHYy0hNyhVijFbKFeKA5ti+QhygHk8trhBjOBd7iyvEEK0MwPxj7wpQh8OBK6M385sQAyySUbhClFjKAK4QBVIZveMKeAtpPYxtVpC8AbtgnYyC+j+osuPRl1YGVtM9sph4JaNwhTDwlgFcIUSsZGDrAB8hrUVHD5+CdzLqNW5CBkQcUzVXCIK1DMqJMxRy6rEVlYznWj+EeERwRaKPqRrSkXVSSrxkUGf4S8jJKYlORmtN8qW+e0o8ZXBmRxayM9HJAHrrNoX0vnjHlHjL4M7s6ITMSMaIrpDdUxIho7cHtj6akFlviTczkzFaX3Rk7ZKSJ5YypDMaCukVuZuUCBmUPVSX+i5SMiSjQBKCFby6lCgZ1H3ICdlRSjYZAOvIsmxgNlG9cPdh3yG9DbKm5Fkv/N1aRq93yT6inx8CWEV0ZTxmoPqU1SNrWizx6lEsZPQG7Cxl1JvmhFAl5EQpnjIA8R3yBCvUaIvpRPRoJgTwfntmEdmXqRBgVDywipgZvZgLASiNAFnFzKzfRQhAbQrIIiZDzW5CCiuIyVSju5ACp2nAsyxuLUDUyxImBJAMokZaqmbfwPG8CRVS0IqJYMJY3kwRUpNNzuRxzBdSM0tOohHkElLjLSdp23mFtJBKWqjFtYTsz9fXP6/opz0eqPiQAAAAAElFTkSuQmCC'
    srcFlechaAbajo = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAOwSURBVHhe7Z3bbishDEWT/v8/n1OiEk0JF9v4spl6SVX7ErD3wkPUh+T575tHAsNRQp7P589fPE46c7BCpOFTQZUEI8RawAwkOeFCIkX0iJYTIgRNQo8oMa5CdkVIS93Z11uMmxBuKJZlSQR5iTEXwmneq+kWpBrNhJwgogWhZhMh1MZQRLRE1q8uhNIMqoiWiF5UhawaOEVEi2dfakJmRZ8qosWjx20hd52KEdb9bgnxlrHab4ZmLZZ9f/38ZnOSjMLu66+setvZSyxkhrYMRKx6FAkZnYBS5F+QUZn1K50StpCZjL+KphSWkJ1nowX1hPZ+UOBmRhYyWxgpgChmGXCkkISkDBoaUkSXeiVlfLKbyVLIyGzKGDPKhjIloglJGWukGU2FcC6jhMYq06GQfFTtI8lq61JPZMympCskp0MPbmY5IUGMDj1ZSE6HHE52H0JW7wISPXpZkyYkp2MfaoZ5h4DxS0hvhHI6bGkzzwlxhHK4UwgYbyH5uIrjmn1OiDOrQ55CwEghYKQQMF5C8kLHISckgN5hr0ORQsBIIWCkEDBSCBgpBIwUAkYKASOFgJFCwEghYKQQMF4fHKD1z8XeOpbMavSshZvVLO/XhPQW5DbkLQMJzd7zkaWElpQUAoaaEMmdk3zy/jSg0chxgp6N7R2EafS3yvk9IRqBzdbQesZGYXnYrq9Xv0PuKMVSRovJpX4nKZoyKL3/EtLbQBrgHaRoyhjRrmMyIZWTpXjI6EESshPeiVIsZFB7/RBiYf8kKRYyRvTWIz+ydoM7QYqVDE5/XSHaJ6GCLMVKxojRmqxLXSM0RCmWMrg9DYVYnIoKkhRLGSNm67ImpKAVGIIUaxmSPqZCrE5IJVJKlIzV2uwJKWiGFSHFWsYOSyGjAk+V4iFjtAdlfdGEVE6Tgi6jQBLiEVbBcp9IGRzIE3KylGgZnD1Yjyyt4ldoSvGQMYO7B/sOGW0gPb0jNKR4yRjtI9lD/JVH0c0WZvt41Gexx9a7rBGzQrlIQo+WsYNYyKqxKCkIMnb22ZoQNCmnyyhsf49hxSOMgkSyxv7WIipqd8isoNKMJMge3MZPklFQm5AKJXiPkAq7+3j1ckVdSIE6DZaB7aztVX8PEyEFalMF7fCk60WKqJgJqXDEFCTlXPfgvt6jPg7mQircxgtWpSHV0uImpCAJooVb7u6ejvG8cBVyRUOOJUGxxAmpoIkJjiNeyJUoOUARYAm5Yi0HtG1cISO4og5r7zwh9+bx+A+B658v9FrkxAAAAABJRU5ErkJggg=='

    width = 32
    height = 32
    widthLlegenda = 64
    heightLlegenda = 64

    rows = 0
    columns = 0
    widthTable = 0
    periodo = 1
    periodoFinal = 0
    movRestants = 0
    nivell = 0
    obstacles = {}
    posFinal = (0,0)
    rastreCeles = {}

    celes = {}
    celesPos = {}
    dicDimensions = {}

    def nivellEstaticTeclat(self, dicNivell):
        
        self.rows = 0
        self.columns = 0
        self.widthTable = 0
        self.periodo = 1
        self.periodoFinal = 0
        self.nivell = 0
        self.obstacles = {}
        self.posFinal = (0,0)
        self.celes = {}
        self.celesPos = {}


        self.fileout = open("pruebaLauncher.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM NIVELL ESTATIC")

        diccionariNivell = json.loads(dicNivell)

        print(diccionariNivell)
        #DICCIONARI CONTÉ TOT, CAL LLEVAR GUARDIES I NOMÉS POSAR 1R PERIODE, A MÉS TENIM OBSTACLES ORDENATS QUE DEURIEN PODER
        #SUSTITUIR DICOBSTACLES, PERO TENINT EN COMPTE QUE SON STRINGS,
        # DE FET EL PROBLEMA DE CELES SEGURAMENT SIGA PERQUE SON STRINGS I NO TUPLES


        diccionariNivells = diccionariNivell.copy()

        self.nivell = diccionariNivells["nivell"]

        (y,x) = diccionariNivells["posFinal"]
        self.posFinal = (y,x)
        (y,x) = diccionariNivells["posInicial"]
        posInicial = (y,x)

        print(self.celesPos)

        self.periodoFinal = diccionariNivells["solucio"] - 1
        if "celes" in diccionariNivells:
            self.celes = diccionariNivells["celes"]
            self.celesPos = diccionariNivells["celesPos"]
            self.periode = diccionariNivells["periode"]
        else:
            print(self.celesPos)
            self.celes[posInicial] = '1'
            self.celesPos['1'] = [y,x]
            self.periode = 1
        guardies = diccionariNivells["guardies"]

        # celes_list = list(self.celes)
        # posActual = celes_list[self.periode - 1]

        print(self.celesPos)

        posActual = self.celesPos[str(self.periode)]
        if '2' in self.celesPos:
            posAnterior = self.celesPos[str(self.periode - 1)]
        else:
            posAnterior = None

        self.movRestants = self.periodoFinal - self.periode

        (self.rows, self.columns) = diccionariNivells["dimensions"]
        self.widthTable = self.width*self.columns


        #Fem un diccionari per a compobar els obstacles facilment, 
        #este deuriem crearlo al rebre el nivell estatic
        # for x in diccionariNivells['obstacles']:
        #     obs = diccionariNivells['obstacles'][x]
        #     self.obstacles[tuple(obs)] = 'obstacle'
        self.obstacles = diccionariNivells["obstaclesOrdenats"]


        #COMENÇA EL CODI HTML
        top = "<section class='content'><h1 class='row'>Path In Time</h1><div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top+= "<h2>Nivel:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'nivell' > {nivell} </h2> </td> <td style='width: 91px;'> <h2>Mov: </h2> </td><td style='width: 91px;'> <h2 id = 'periodo' > {periodo} </h2> </td> <td style='width: 91px;'> <h2>Movs Restants: </h2> </td><td style='width: 91px;'> <h2 id = 'movRestants' > {movRestants} </h2> </td></tr> </tbody> </table> <div>".format(nivell = self.nivell, periodo = self.periode, movRestants = self.movRestants)

        table = "<table style='border: 1px solid #000;' border='0' width='{widthTable}' cellspacing='0' cellpadding='0'>\n".format(widthTable = self.widthTable) 
        # Crea la taula i posa les imatges corresponents a partir de les variables
        for row in range(self.rows):
            table += "  <tr>\n"
            for column in range(self.columns):
                src = self.srcLliure
                mira = 0
                guardiaGoal = False
                guardiaRastre = False
                guardiaVisioRastre = False
                playerPos = False
                guardiaVisioGoal = False
                #id = "("+str(row)+", "+str(column)+")"
                id = (row, column)
                id2 = [row, column]
                if id == posActual or str(id) == posActual or str(id) == str(posActual) or id2 == posActual or str(id2) == posActual or str(id2) == str(posActual):
                    src = self.srcPlayer
                    playerPos = True
                elif str(id) in self.obstacles:
                    src = self.srcObstacle
                else:
                    if str(id) in guardies["0"]:
                        (guard, mira) = guardies["0"][str(id)]
                        if id == self.posFinal:
                            if mira == 0:
                                src = self.srcGuardiaFinalAvall
                            elif mira == 1:
                                src = self.srcGuardiaFinalAmunt  
                            elif mira == 2:
                                src = self.srcGuardiaFinalDreta 
                            else:
                                src = self.srcGuardiaFinalEsquerra
                            guardiaGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvallFinal
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmuntFinal
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDretaFinal
                                else:
                                    src = self.srcGuardiaRastreEsquerraFinal
                            else:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvall
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmunt
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDreta
                                else:
                                    src = self.srcGuardiaRastreEsquerra
                            guardiaRastre = True
                        else:
                            if mira == 0:
                                src = self.srcGuardiaAvall  
                            elif mira == 1:
                                src = self.srcGuardiaAmunt 
                            elif mira == 2:
                                src = self.srcGuardiaDreta
                            else:
                                src = self.srcGuardiaEsquerra 
                    elif str(id) in guardies["1"]:
                        if id == self.posFinal:
                            src = self.srcGoalGuardiaVisio
                            guardiaVisioGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                src = self.srcRastreFinalGuardiaVisio
                            else:
                                src = self.srcRastreGuardiaVisio
                            guardiaVisioRastre = True
                        else:
                            src = self.srcGuardiaVisio

                if id == self.posFinal and not guardiaGoal and not guardiaVisioGoal:
                    src = self.srcFinal
                elif str(id) in self.celes and not guardiaRastre and not guardiaVisioRastre and not playerPos and not guardiaVisioGoal:
                    if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                        src = self.srcRastreFinal
                    else:
                        src = self.srcRastre

                table += "    <td><img id = {id} src = '{src}' width = '{width}' height = '{height}'></td>\n".format(src = src, width = self.width, height = self.height, id = id)
            table += "  </tr>\n"
        table += "</table>"


        bot = "</table>\n <table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n "
        bot += "<td width = '{width}'>\n q/Q = Eixir </td>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n m/M = Menu </td>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n r/R = Reiniciar </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n l/L = Llegenda </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)


        function = "<script>\n function movimentSeleccionat(selectObject) {\n document.getElementById('moviment').value = selectObject.value;\n document.getElementById('moviment').innerHTML = selectObject.value;\n }\n \n </script>\n </section>\n"
        #function += "<script type='text/javascript'>\n document.onekeydown = function(event){\n switch (event.keyCode) {\n case 37:\n "
        function += "<style>\n .myclass {\n display: inline-block;\n width: 64px;\n padding: 0px 0px;\n height: 64px;\n}\n</style>\n"

        print("Hem acabat d'escriure el NIVELL ESTÀTIC")

        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(bot)
        self.fileout.writelines(function)
        self.fileout.close()

    def nivellEstaticBotons(self, dicNivell):

        self.rows = 0
        self.columns = 0
        self.widthTable = 0
        self.periodo = 1
        self.periodoFinal = 0
        self.nivell = 0
        self.obstacles = {}
        self.posFinal = (0, 0)
        self.celes = {}
        self.celesPos = {}

        self.fileout = open("pruebaLauncher.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM NIVELL ESTATIC")

        diccionariNivell = json.loads(dicNivell)
        # DICCIONARI CONTÉ TOT, CAL LLEVAR GUARDIES I NOMÉS POSAR 1R PERIODE, A MÉS TENIM OBSTACLES ORDENATS QUE DEURIEN PODER
        # SUSTITUIR DICOBSTACLES, PERO TENINT EN COMPTE QUE SON STRINGS,
        # DE FET EL PROBLEMA DE CELES SEGURAMENT SIGA PERQUE SON STRINGS I NO TUPLES

        print(diccionariNivell)

        diccionariNivells = diccionariNivell.copy()

        self.nivell = diccionariNivells["nivell"]

        (y,x) = diccionariNivells["posFinal"]
        self.posFinal = (y,x)
        (y,x) = diccionariNivells["posInicial"]
        posInicial = (y,x)

        print(self.celesPos)

        self.periodoFinal = diccionariNivells["solucio"] - 1
        if "celes" in diccionariNivells:
            self.celes = diccionariNivells["celes"]
            self.celesPos = diccionariNivells["celesPos"]
            self.periode = diccionariNivells["periode"]
        else:
            print(self.celesPos)
            self.celes[posInicial] = '1'
            self.celesPos['1'] = [y,x]
            self.periode = 1
        guardies = diccionariNivells["guardies"]

        # celes_list = list(self.celes)
        # posActual = celes_list[self.periode - 1]

        print(self.celesPos)

        posActual = self.celesPos[str(self.periode)]
        if '2' in self.celesPos:
            posAnterior = self.celesPos[str(self.periode - 1)]
        else:
            posAnterior = None

        self.movRestants = self.periodoFinal - self.periode

        (self.rows, self.columns) = diccionariNivells["dimensions"]
        self.widthTable = self.width*self.columns

        # Fem un diccionari per a compobar els obstacles facilment,
        # este deuriem crearlo al rebre el nivell estatic
        # for x in diccionariNivells['obstacles']:
        #     obs = diccionariNivells['obstacles'][x]
        #     self.obstacles[tuple(obs)] = 'obstacle'
        self.obstacles = diccionariNivells["obstaclesOrdenats"]

        # COMENÇA EL CODI HTML
        top = "<section class='content'><h1 class='row'>Path In Time</h1><div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top += "<h2>Nivel:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'nivell' > {nivell} </h2> </td> <td style='width: 91px;'> <h2>Mov: </h2> </td><td style='width: 91px;'> <h2 id = 'periodo' > {periodo} </h2> </td> <td style='width: 91px;'> <h2>Movs Restants: </h2> </td><td style='width: 91px;'> <h2 id = 'movRestants' > {movRestants} </h2> </td></tr> </tbody> </table> <div>".format(nivell = self.nivell, periodo = self.periode, movRestants = self.movRestants)

        table = "<table style='border: 1px solid #000;' border='0' width='{widthTable}' cellspacing='0' cellpadding='0'>\n".format(
            widthTable=self.widthTable)
        # Crea la taula i posa les imatges corresponents a partir de les variables
        for row in range(self.rows):
            table += "  <tr>\n"
            for column in range(self.columns):
                src = self.srcLliure
                mira = 0
                guardiaGoal = False
                guardiaRastre = False
                guardiaVisioRastre = False
                playerPos = False
                guardiaVisioGoal = False
                # id = "("+str(row)+", "+str(column)+")"
                id = (row, column)
                id2 = [row, column]
                if id == posActual or str(id) == posActual or str(id) == str(posActual) or id2 == posActual or str(id2) == posActual or str(id2) == str(posActual):
                    src = self.srcPlayer
                    playerPos = True
                elif str(id) in self.obstacles:
                    src = self.srcObstacle
                else:
                    if str(id) in guardies["0"]:
                        (guard, mira) = guardies["0"][str(id)]
                        if id == self.posFinal:
                            if mira == 0:
                                src = self.srcGuardiaFinalAvall
                            elif mira == 1:
                                src = self.srcGuardiaFinalAmunt
                            elif mira == 2:
                                src = self.srcGuardiaFinalDreta
                            else:
                                src = self.srcGuardiaFinalEsquerra
                            guardiaGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvallFinal
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmuntFinal
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDretaFinal
                                else:
                                    src = self.srcGuardiaRastreEsquerraFinal
                            else:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvall
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmunt
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDreta
                                else:
                                    src = self.srcGuardiaRastreEsquerra
                            guardiaRastre = True
                        else:
                            if mira == 0:
                                src = self.srcGuardiaAvall
                            elif mira == 1:
                                src = self.srcGuardiaAmunt
                            elif mira == 2:
                                src = self.srcGuardiaDreta
                            else:
                                src = self.srcGuardiaEsquerra
                    elif str(id) in guardies["1"]:
                        if id == self.posFinal:
                            src = self.srcGoalGuardiaVisio
                            guardiaVisioGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                src = self.srcRastreFinalGuardiaVisio
                            else:
                                src = self.srcRastreGuardiaVisio
                            guardiaVisioRastre = True
                        else:
                            src = self.srcGuardiaVisio

                if id == self.posFinal and not guardiaGoal and not guardiaVisioGoal:
                    src = self.srcFinal
                elif str(id) in self.celes and not guardiaRastre and not guardiaVisioRastre and not playerPos and not guardiaVisioGoal:
                    if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                        src = self.srcRastreFinal
                    else:
                        src = self.srcRastre

                table += "    <td><img id = {id} src = '{src}' width = '{width}' height = '{height}'></td>\n".format(
                    src=src, width=self.width, height=self.height, id=id)
            table += "  </tr>\n"
        table += "</table>"

        bot = "</div>\n</div>\n <form role='form' method='post' action='/submit' enctype='multipart/form-data'>"
        bot += "<div>\n <div>\n<h2>Movimiento: </h2>\n</div>\n <div class='seleccionMovimiento'>\n<table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n"
        bot += "<tbody>\n <tr>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n <label>\n <button style='border:none;'  class='myclass' type='submit' name='mov' id='moviment' value='ARRIBA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n".format(
            width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaArriba)
        bot += "</label>\n </td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n <img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n  <div>\n <p>OBSTACULO </p>\n </div></td>\n".format(
            src=self.srcObstacle, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "<td width = '{width}'>\n <img src='{src}' width = '{width}' height = '{height}'></td><td width = '{width}'>\n <div><p>VISION GUARDIA </p>\n </div>\n </td>\n </tr>\n".format(
            src=self.srcGuardiaVisio, width=self.widthLlegenda, height=self.heightLlegenda, id=id)
        bot += "<tr>\n <td width = '{width}'>\n <label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='IZQUIERDA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label>\n </td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n".format(
            width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaIzquierda)
        bot += "<label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='DERECHA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label>\n </td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>GUARDIA </p>\n </div>\n </td>\n".format(
            src=self.srcGuardiaAmunt, width=self.widthLlegenda, height=self.heightLlegenda,
            srcFlecha=self.srcFlechaDerecha)
        bot += "<td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>OBJETIVO </p>\n </div></td>\n </tr>\n <tr>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n".format(
            src=self.srcFinal, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "<label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='ABAJO' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label></td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n".format(
            src=self.srcRastre, width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaAbajo)
        bot += "<td width = '{width}'>\n <div>\n <p>RASTRO </p>\n </div></td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>JUGADOR </p>\n </div></td>\n </tr>\n</tbody>\n</table>\n</div>\n</form>\n".format(
            src=self.srcPlayer, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "</table>\n <table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n "
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitEixir' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='eixir' id='eixir' value='eixir' onclick='movimentSeleccionat(this)'>EIXIR</button>\n </form>\n </td>\n".format(
            width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitMenu' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='menu' id='menu' value='menu' onclick='movimentSeleccionat(this)'>MENU</button>\n </form>\n </td>\n".format(
            width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitReiniciar' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='reiniciar' id='reiniciar' value='reiniciar' onclick='movimentSeleccionat(this)'>REINICIAR</button>\n </form>\n </td>\n </tr>\n </tbody>\n </table>\n".format(
            width=self.widthLlegenda)

        function = "<script>\n function movimentSeleccionat(selectObject) {\n document.getElementById('moviment').value = selectObject.value;\n document.getElementById('moviment').innerHTML = selectObject.value;\n }\n \n </script>\n </section>\n"
        # function += "<script type='text/javascript'>\n document.onekeydown = function(event){\n switch (event.keyCode) {\n case 37:\n "
        function += "<style>\n .myclass {\n display: inline-block;\n width: 64px;\n padding: 0px 0px;\n height: 64px;\n}\n</style>\n"

        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(bot)
        self.fileout.writelines(function)
        self.fileout.close()

    def tancarNivell(self):

        #EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE
        print("ANEM A TANCAR EL NIVELL")
    
        self.fileout = open("pruebaLauncher.html", "w")
        function = "<html>\n <body>\n <script>\n function closeWindow() {\n window.close();\n }\n window.onload = closeWindow();\n </script>\n </body>\n </html>\n"

        self.fileout.writelines(function)
        self.fileout.close()

    def nivellDinamicTeclat(self, dicNivell):

        #EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE
    
        self.fileout = open("pruebaLauncher.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM NIVELL DINAMIC")

        #DICCIONARI CONTE CELES PERIODE I GUARDIES, LO NECESSARI, FER UN CHECK DE CELES
        #NO POT RETROCEDIR, EL RASTRE MACHACA POSICIO DEL JUGADOR

        diccionariDinamic = json.loads(dicNivell)

        guardies = diccionariDinamic["guardies"]
        self.periode = diccionariDinamic["periode"]
        self.celes = diccionariDinamic["celes"]
        self.celesPos = diccionariDinamic["celesPos"]

        print(self.celesPos)

        posActual = self.celesPos[str(self.periode)]
        if '2' in self.celesPos:
            posAnterior = self.celesPos[str(self.periode - 1)]
        else:
            posAnterior = None


        self.movRestants = self.periodoFinal - self.periode

        # celes_list = list(self.celes)
        # posActual = celes_list[self.periode - 1]
        # print("ESTE ES EL TAMANY DE LA LLISTA DE CELES ", len(celes_list))
        #
        # if len(celes_list) >= 2:
        #     posAnterior = celes_list[self.periode-2]

        print(diccionariDinamic)


        print("COMENÇEM A ESCRIURE CODI HTML, PROCESEM NIVELL DINAMIC")

        #COMENÇA EL CODI HTML
        top = "<section class='content'><h1 class='row'>Path In Time</h1><div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top+= "<h2>Nivel:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'nivell' > {nivell} </h2> </td> <td style='width: 91px;'> <h2>Mov: </h2> </td><td style='width: 91px;'> <h2 id = 'periodo' > {periodo} </h2> </td> <td style='width: 91px;'> <h2>Movs Restants: </h2> </td><td style='width: 91px;'> <h2 id = 'movRestants' > {movRestants} </h2> </td></tr> </tbody> </table> <div>".format(nivell = self.nivell, periodo = self.periode, movRestants = self.movRestants)

        table = "<table style='border: 1px solid #000;' border='0' width='{widthTable}' cellspacing='0' cellpadding='0'>\n".format(widthTable = self.widthTable) 
        # Crea la taula i posa les imatges corresponents a partir de les variables
        for row in range(self.rows):
            table += "  <tr>\n"
            for column in range(self.columns):
                src = self.srcLliure
                mira = 0
                guardiaGoal = False
                guardiaRastre = False
                guardiaVisioRastre = False
                playerPos = False
                guardiaVisioGoal = False
                #id = "("+str(row)+", "+str(column)+")"
                id = (row,column)
                id2 = [row,column]
                if id == posActual or str(id) == posActual or str(id) == str(posActual) or id2 == posActual or str(id2) == posActual or str(id2) == str(posActual):
                    src = self.srcPlayer
                    playerPos = True
                elif str(id) in self.obstacles:
                    src = self.srcObstacle
                else:
                    if str(id) in guardies["0"]:
                        (guard, mira) = guardies["0"][str(id)]
                        if id == self.posFinal:
                            if mira == 0:
                                src = self.srcGuardiaFinalAvall
                            elif mira == 1:
                                src = self.srcGuardiaFinalAmunt  
                            elif mira == 2:
                                src = self.srcGuardiaFinalDreta 
                            else:
                                src = self.srcGuardiaFinalEsquerra
                            guardiaGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvallFinal
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmuntFinal
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDretaFinal
                                else:
                                    src = self.srcGuardiaRastreEsquerraFinal
                            else:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvall
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmunt
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDreta
                                else:
                                    src = self.srcGuardiaRastreEsquerra
                            guardiaRastre = True
                        else:
                            if mira == 0:
                                src = self.srcGuardiaAvall  
                            elif mira == 1:
                                src = self.srcGuardiaAmunt 
                            elif mira == 2:
                                src = self.srcGuardiaDreta
                            else:
                                src = self.srcGuardiaEsquerra 
                    elif str(id) in guardies["1"]:
                        if id == self.posFinal:
                            src = self.srcGoalGuardiaVisio
                            guardiaVisioGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                src = self.srcRastreFinalGuardiaVisio
                            else:
                                src = self.srcRastreGuardiaVisio
                            guardiaVisioRastre = True
                        else:
                            src = self.srcGuardiaVisio

                if id == self.posFinal and not guardiaGoal and not guardiaVisioGoal:
                    src = self.srcFinal
                elif str(id) in self.celes and not guardiaRastre and not guardiaVisioRastre and not playerPos:
                    if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                        src = self.srcRastreFinal
                    else:
                        src = self.srcRastre

                table += "    <td><img id = {id} src = '{src}' width = '{width}' height = '{height}'></td>\n".format(src = src, width = self.width, height = self.height, id = id)
            table += "  </tr>\n"
        table += "</table>"

        bot = "</table>\n <table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n "
        bot += "<td width = '{width}'>\n q/Q = Eixir </td>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n m/M = Menu </td>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n r/R = Reiniciar </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n l/L = Llegenda </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)

        function = "<script>\n function closeWindow() {\n window.close();\n }\n function movimentSeleccionat(selectObject) {\n document.getElementById('moviment').value = selectObject.value;\n document.getElementById('moviment').innerHTML = selectObject.value;\n }\n "
        function += "</script>\n </section>\n <style>\n .myclass {\n display: inline-block;\n width: 64px;\n padding: 0px 0px;\n height: 64px;\n}\n</style>\n"


        print("HEM CREAT NIVELL DINAMIC")
        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(bot)
        self.fileout.writelines(function)
        self.fileout.close()

    def nivellDinamicBotons(self, dicNivell):

        # EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE

        self.fileout = open("pruebaLauncher.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM NIVELL DINAMIC")

        # DICCIONARI CONTE CELES PERIODE I GUARDIES, LO NECESSARI, FER UN CHECK DE CELES
        # NO POT RETROCEDIR, EL RASTRE MACHACA POSICIO DEL JUGADOR

        diccionariDinamic = json.loads(dicNivell)

        guardies = diccionariDinamic["guardies"]
        self.periode = diccionariDinamic["periode"]
        self.celes = diccionariDinamic["celes"]
        self.celesPos = diccionariDinamic["celesPos"]

        posActual = self.celesPos[str(self.periode)]
        if '2' in self.celesPos:
            posAnterior = self.celesPos[str(self.periode - 1)]
        else:
            posAnterior = None


        self.movRestants = self.periodoFinal - self.periode

        # celes_list = list(self.celes)
        # posActual = celes_list[self.periode - 1]
        # print("ESTE ES EL TAMANY DE LA LLISTA DE CELES ", len(celes_list))
        #
        # if len(celes_list) >= 2:
        #     posAnterior = celes_list[self.periode-2]

        print(diccionariDinamic)

        print("COMENÇEM A ESCRIURE CODI HTML, PROCESEM NIVELL DINAMIC")

        # COMENÇA EL CODI HTML
        top = "<section class='content'><h1 class='row'>Path In Time</h1><div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top += "<h2>Nivel:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'nivell' > {nivell} </h2> </td> <td style='width: 91px;'> <h2>Mov: </h2> </td><td style='width: 91px;'> <h2 id = 'periodo' > {periodo} </h2> </td> <td style='width: 91px;'> <h2>Movs Restants: </h2> </td><td style='width: 91px;'> <h2 id = 'movRestants' > {movRestants} </h2> </td></tr> </tbody> </table> <div>".format(nivell = self.nivell, periodo = self.periode, movRestants = self.movRestants)

        table = "<table style='border: 1px solid #000;' border='0' width='{widthTable}' cellspacing='0' cellpadding='0'>\n".format(
            widthTable=self.widthTable)
        # Crea la taula i posa les imatges corresponents a partir de les variables
        for row in range(self.rows):
            table += "  <tr>\n"
            for column in range(self.columns):
                src = self.srcLliure
                mira = 0
                guardiaGoal = False
                guardiaRastre = False
                guardiaVisioRastre = False
                playerPos = False
                guardiaVisioGoal = False
                # id = "("+str(row)+", "+str(column)+")"
                id = (row, column)
                id2 = [row, column]
                if id == posActual or str(id) == posActual or str(id) == str(posActual) or id2 == posActual or str(id2) == posActual or str(id2) == str(posActual):
                    src = self.srcPlayer
                    playerPos = True
                elif str(id) in self.obstacles:
                    src = self.srcObstacle
                else:
                    if str(id) in guardies["0"]:
                        (guard, mira) = guardies["0"][str(id)]
                        if id == self.posFinal:
                            if mira == 0:
                                src = self.srcGuardiaFinalAvall
                            elif mira == 1:
                                src = self.srcGuardiaFinalAmunt
                            elif mira == 2:
                                src = self.srcGuardiaFinalDreta
                            else:
                                src = self.srcGuardiaFinalEsquerra
                            guardiaGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvallFinal
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmuntFinal
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDretaFinal
                                else:
                                    src = self.srcGuardiaRastreEsquerraFinal
                            else:
                                if mira == 0:
                                    src = self.srcGuardiaRastreAvall
                                elif mira == 1:
                                    src = self.srcGuardiaRastreAmunt
                                elif mira == 2:
                                    src = self.srcGuardiaRastreDreta
                                else:
                                    src = self.srcGuardiaRastreEsquerra
                            guardiaRastre = True
                        else:
                            if mira == 0:
                                src = self.srcGuardiaAvall
                            elif mira == 1:
                                src = self.srcGuardiaAmunt
                            elif mira == 2:
                                src = self.srcGuardiaDreta
                            else:
                                src = self.srcGuardiaEsquerra
                    elif str(id) in guardies["1"]:
                        if id == self.posFinal:
                            src = self.srcGoalGuardiaVisio
                            guardiaVisioGoal = True
                        elif str(id) in self.celes:
                            if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                                src = self.srcRastreFinalGuardiaVisio
                            else:
                                src = self.srcRastreGuardiaVisio
                            guardiaVisioRastre = True
                        else:
                            src = self.srcGuardiaVisio

                if id == self.posFinal and not guardiaGoal and not guardiaVisioGoal:
                    src = self.srcFinal
                elif str(id) in self.celes and not guardiaRastre and not guardiaVisioRastre and not playerPos and not guardiaVisioGoal:
                    if posAnterior == id or str(id) == posAnterior or posAnterior == id2 or str(id2) == posAnterior:
                        src = self.srcRastreFinal
                    else:
                        src = self.srcRastre

                table += "    <td><img id = {id} src = '{src}' width = '{width}' height = '{height}'></td>\n".format(
                    src=src, width=self.width, height=self.height, id=id)
            table += "  </tr>\n"
        table += "</table>"

        bot = "</div>\n</div>\n <form role='form' method='post' action='/submit' enctype='multipart/form-data'>"
        bot += "<div>\n <div>\n<h2>Movimiento </h2>\n</div>\n <div class='seleccionMovimiento'>\n<table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n"
        bot += "<tbody>\n <tr>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n <label>\n <button style='border:none;'  class='myclass' type='submit' name='mov' id='moviment' value='ARRIBA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n".format(
            width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaArriba)
        bot += "</label>\n </td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n <img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n  <div>\n <p>OBSTACULO </p>\n </div></td>\n".format(
            src=self.srcObstacle, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "<td width = '{width}'>\n <img src='{src}' width = '{width}' height = '{height}'></td><td width = '{width}'>\n <div><p>VISION GUARDIA </p>\n </div>\n </td>\n </tr>\n".format(
            src=self.srcGuardiaVisio, width=self.widthLlegenda, height=self.heightLlegenda, id=id)
        bot += "<tr>\n <td width = '{width}'>\n <label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='IZQUIERDA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label>\n </td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n".format(
            width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaIzquierda)
        bot += "<label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='DERECHA' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label>\n </td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>GUARDIA </p>\n </div>\n </td>\n".format(
            src=self.srcGuardiaAmunt, width=self.widthLlegenda, height=self.heightLlegenda,
            srcFlecha=self.srcFlechaDerecha)
        bot += "<td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>OBJETIVO </p>\n </div></td>\n </tr>\n <tr>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'>\n".format(
            src=self.srcFinal, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "<label>\n <button style='border:none;' class='myclass' type='submit' name='mov' id='moviment' value='ABAJO' onclick='movimentSeleccionat(this)'><img src='{srcFlecha}' width = '{width}' height = '{height}'></button>\n </label></td>\n <td width = '{width}'>&nbsp;</td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n".format(
            src=self.srcRastre, width=self.widthLlegenda, height=self.heightLlegenda, srcFlecha=self.srcFlechaAbajo)
        bot += "<td width = '{width}'>\n <div>\n <p>RASTRO </p>\n </div></td>\n <td width = '{width}'><img src='{src}' width = '{width}' height = '{height}'>\n </td>\n <td width = '{width}'>\n <div>\n <p>JUGADOR </p>\n </div></td>\n </tr>\n</tbody>\n</table>\n</div>\n</form>\n".format(
            src=self.srcPlayer, width=self.widthLlegenda, height=self.heightLlegenda)
        bot += "</table>\n <table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n "
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitEixir' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='eixir' id='eixir' value='eixir' onclick='movimentSeleccionat(this)'>EIXIR</button>\n </form>\n </td>\n".format(
            width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitMenu' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='menu' id='menu' value='menu' onclick='movimentSeleccionat(this)'>MENU</button>\n </form>\n </td>\n".format(
            width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n <form role='form' method='post' action='/submitReiniciar' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='reiniciar' id='reiniciar' value='reiniciar' onclick='movimentSeleccionat(this)'>REINICIAR</button>\n </form>\n </td>\n </tr>\n </tbody>\n </table>\n".format(
            width=self.widthLlegenda)

        function = "<script>\n function closeWindow() {\n window.close();\n }\n function movimentSeleccionat(selectObject) {\n document.getElementById('moviment').value = selectObject.value;\n document.getElementById('moviment').innerHTML = selectObject.value;\n }\n "
        function += "</script>\n </section>\n <style>\n .myclass {\n display: inline-block;\n width: 64px;\n padding: 0px 0px;\n height: 64px;\n}\n</style>\n"

        print("HEM CREAT NIVELL DINAMIC")
        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(bot)
        self.fileout.writelines(function)
        self.fileout.close()

    def ranking(self, dicDatos):
        #EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE
        self.fileout = open("ranking.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM RANKING")
        ranking = json.loads(dicDatos)
        #DADES A MOSTRAR NIVELLS DE 1 FINS AL ULTIM REGISTRAR, CREAR EN LA TAULA, RANKING, AGAFEM ELS 10 MAJORS ARREGLO PUNTUACIÓ, AFEGIR PUNTUACIO

        amplaria = self.widthLlegenda * 8
        print(ranking)

        print("COMENÇEM A ESCRIURE CODI HTML, PROCESEM RANKING")

        #COMENÇA EL CODI HTML
        top = "<section class='content'><div><h1 class='row'>Path In Time</h1></div>\n <div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"

        table = "<table style='border: 1px solid #000;' border='0' width='{amplaria}' cellspacing='0' cellpadding='0'>\n <form role='form' method='post' action='/submitNivell' enctype='multipart/form-data'>\n".format(amplaria = amplaria)
        table += "<td><h2 width = '{width}' height = '{height}'>Rank</h2></td>\n <td><h2 width = '{width}' height = '{height}'>Nom</h2></td>\n <td><h2 width = '{width}' height = '{height}'>Punts</h2></td>\n"
        # Crea la taula i posa les imatges corresponents a partir de les variables


        for row in range(10):
            table += "  <tr>\n"
            for column in range(3):
                if str(row + 1) not in ranking:
                    name = "-"
                    rank = "-"
                else:
                    llista = ranking[str(row + 1)]
                    #name = llista[0]
                    name = llista[0][0:-10]
                    rank = llista[1]
                pos = row + 1
                if column == 0:
                    table += "    <td><h2 width = '{width}' height = '{height}'>{pos}</h2></td>\n".format(width = self.width, height = self.height, pos = pos)
                elif column == 1:
                    table += "    <td><h2 width = '{width}' height = '{height}'>{name}</h2></td>\n".format(width = self.widthLlegenda, height = self.height, name = name)
                elif column == 2:
                    table += "    <td><h2 width = '{width}' height = '{height}'>{rank}</h2></td>\n".format(width = self.width, height = self.height, rank = rank)
            table += "  </tr>\n"

        
        table += "</form>\n </table>\n"
        function = "<style>\n .myclass {\n display: inline-block;\n width: 32px;\n padding: 0px 0px;\n height: 32px;\n}\n</style>\n"

        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(function)
        self.fileout.close()

    def menuInicialTeclat(self, dicDatos):
        #EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE
        self.fileout = open("menu.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM MENU")
        diccionari = json.loads(dicDatos)
        #DADES A MOSTRAR NIVELLS DE 1 FINS AL ULTIM REGISTRAR, CREAR EN LA TAULA, RANKING, AGAFEM ELS 10 MAJORS ARREGLO PUNTUACIÓ, AFEGIR PUNTUACIO

        nivell = diccionari["nivell"]
        print(diccionari)
        rankingPersonal = diccionari["rankingPersonal"]

        #Aquest apartat tan sols existeix en dos casos, quan establim contacte per primera vegada,
        # i quan completem un nivell, aquesta funció es crida de 3 formes, les dos nomenades, i quan tornem enrrere amb el botó VOLVER
        if "dimensions" in diccionari:
            self.dicDimensions[nivell] = diccionari["dimensions"]

        print(self.dicDimensions)

        heightLevel = 800
        widthLevel = 600
        amplaria = self.widthLlegenda

        files = math.ceil(nivell/5)

        print("COMENÇEM A ESCRIURE CODI HTML, PROCESEM MENU")

        #COMENÇA EL CODI HTML
        top = "<section class='content'><div><h1 class='row'>Path In Time</h1></div>\n <div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top+= "<h2>Clasificació Propia:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'rankingPersonal' > {rankingPersonal} </h2> </td> </tr> </tbody> </table> <div>".format(rankingPersonal = rankingPersonal)
        top += "<h2>NIVELLS:</h2>"
        table = "<table style='border: 1px solid #000;' border='0' width='{amplaria}' cellspacing='0' cellpadding='0'>\n <form role='form' method='post' action='/submitNivell' enctype='multipart/form-data'>\n".format(amplaria = amplaria)
        #table += "<td><h2 width = '{width}' height = '{height}'>N</h2></td>\n <td><h2 width = '{width}' height = '{height}'>I</h2></td>\n <td><h2 width = '{width}' height = '{height}'>V</h2></td>\n <td><h2 width = '{width}' height = '{height}'>E</h2></td>\n <td><h2 width = '{width}' height = '{height}'>L</h2></td>\n "
        # Crea la taula i posa les imatges corresponents a partir de les variables

        function = "<script>\n let arrayX = [1];\n let arrayY = [1];\n"
        

        # function = "<script>\n function openWin(){\n setTimeout(function(lvl) {window.open('http://127.0.0.1:13000/level', 'LEVEL',"
        # function += "'width={widthLevel}, height={heightLevel}'); ".format(widthLevel = widthLevel, heightLevel = heightLevel)

        
        contador = 0
        for row in range(files):
            table += "  <tr>\n"
            for column in range(5):
                lvl = column + 1 + (contador * 5)
                if lvl <= nivell:
                    #(dimY, dimX) = self.dicDimensions[lvl]
                    table += "    <td><button style='border:none;' class='myclass' type='submit' name='nivellSeleccionat' id='level' value='{lvl}' onclick='movimentSeleccionat(this)'>{lvl1}</button>\n</td>\n".format(lvl = lvl, lvl1 = lvl)
                    #function += " arrayX[{lvl}] = {dimX};\n arrayY[{lvl1}] = {dimY};\n".format(lvl = lvl, lvl1 = lvl, dimY = dimY, dimX = dimX)
                    function += " arrayX[{lvl}] = {dimX};\n arrayY[{lvl1}] = {dimY};\n".format(lvl=lvl, lvl1=lvl, dimY=5, dimX=5)
                else:
                    table += "    <td><h2 width = '{width}' height = '{height}'>&nbsp;</h2></td>\n".format(width = self.width, height = self.height)
                            
            table += "  </tr>\n"
            contador += 1

        
        table += "</form>\n </table>\n"

        function += "function movimentSeleccionat(selectObject) {\n document.getElementById('moviment').value = selectObject.value;\n document.getElementById('moviment').innerHTML = selectObject.value;\n }\n"
        #function += "function openWin(lvl){\n setTimeout(function() {\n var widthLvl = arrayX[lvl] * 100;\n var heightLvl = arrayY[lvl] * 100;\n"
        #function += "let txt = 'width=' + String(widthLvl) + ', height=' + String(heightLvl) ;\n window.open('http://127.0.0.1:13000/level', 'LEVEL',+ txt); "
        
        #function += "window.open('http://127.0.0.1:13000/level', 'LEVEL', 'width=200, height=200'); "
        #function += "window.open('http://127.0.0.1:13000/level', 'LEVEL', 'width='+ String(widthLvl) +', height='+String(heightLvl)); "

        bot = "</table>\n <table style='border: 1px solid #000;' border='0' width='384' cellspacing='0' cellpadding='0'>\n<tbody>\n<tr>\n "
        bot += "<td width = '{width}'>\n q/Q = Eixir </td>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n l/L = Llegenda </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)
        bot += "<td width = '{width}'>\n c/C = Clasificació </td>\n </tr>\n </tbody>\n </table>\n".format(width=self.widthLlegenda)

        
        #function += "}, 500);\n }\n"
        function += "</script>\n <style>\n .myclass {\n display: inline-block;\n width: 32px;\n padding: 0px 0px;\n height: 32px;\n}\n</style>\n"


        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(bot)
        self.fileout.close()

    def menuInicialBotons(self, dicDatos):
        # EL PROBLEMA DE LES CELES ES QUE AQUESTES ESTAN REESCRIVINTSE
        self.fileout = open("menu.html", "w")

        print("ENTRA AL ACTUALITZAR WEB, PROCESEM MENU")
        diccionari = json.loads(dicDatos)
        # DADES A MOSTRAR NIVELLS DE 1 FINS AL ULTIM REGISTRAR, CREAR EN LA TAULA, RANKING, AGAFEM ELS 10 MAJORS ARREGLO PUNTUACIÓ, AFEGIR PUNTUACIO

        nivell = diccionari["nivell"]
        print(diccionari)
        rankingPersonal = diccionari["rankingPersonal"]

        # Aquest apartat tan sols existeix en dos casos, quan establim contacte per primera vegada,
        # i quan completem un nivell, aquesta funció es crida de 3 formes, les dos nomenades, i quan tornem enrrere amb el botó VOLVER
        if "dimensions" in diccionari:
            self.dicDimensions[nivell] = diccionari["dimensions"]

        print(self.dicDimensions)

        heightLevel = 800
        widthLevel = 600
        amplaria = self.widthLlegenda

        files = math.ceil(nivell / 5)

        print("COMENÇEM A ESCRIURE CODI HTML, PROCESEM MENU")

        # COMENÇA EL CODI HTML
        top = "<section class='content'><div><h1 class='row'>Path In Time</h1></div>\n <div><table style='border: 0px solid #000; text-align:center' border='0' width='393'><tbody><tr><td style='width: 91px;'>"
        top += "<h2>Clasificació Propia:</h2> </td> <td style='width: 91px;'>"
        top += " <h2 id = 'rankingPersonal' > {rankingPersonal} </h2> </td> </tr> </tbody> </table> <div>".format(rankingPersonal=rankingPersonal)
        top += "<h2>NIVELLS:</h2>"
        table = "<table style='border: 1px solid #000;' border='0' width='{amplaria}' cellspacing='0' cellpadding='0'>\n <form role='form' method='post' action='/submitNivell' enctype='multipart/form-data'>\n".format(amplaria=amplaria)
        # table += "<td><h2 width = '{width}' height = '{height}'>N</h2></td>\n <td><h2 width = '{width}' height = '{height}'>I</h2></td>\n <td><h2 width = '{width}' height = '{height}'>V</h2></td>\n <td><h2 width = '{width}' height = '{height}'>E</h2></td>\n <td><h2 width = '{width}' height = '{height}'>L</h2></td>\n "
        # Crea la taula i posa les imatges corresponents a partir de les variables

        function = "<script>\n let arrayX = [1];\n let arrayY = [1];\n"

        # function = "<script>\n function openWin(){\n setTimeout(function(lvl) {window.open('http://127.0.0.1:13000/level', 'LEVEL',"
        # function += "'width={widthLevel}, height={heightLevel}'); ".format(widthLevel = widthLevel, heightLevel = heightLevel)

        contador = 0
        for row in range(files):
            table += "  <tr>\n"
            for column in range(5):
                lvl = column + 1 + (contador * 5)
                if lvl <= nivell:
                    # (dimY, dimX) = self.dicDimensions[lvl]
                    table += "    <td><button style='border:none;' class='myclass' type='submit' name='nivellSeleccionat' id='level' value='{lvl}' onclick='openWin(this.value)'>{lvl1}</button>\n</td>\n".format(
                        lvl=lvl, lvl1=lvl)
                    # function += " arrayX[{lvl}] = {dimX};\n arrayY[{lvl1}] = {dimY};\n".format(lvl = lvl, lvl1 = lvl, dimY = dimY, dimX = dimX)
                    function += " arrayX[{lvl}] = {dimX};\n arrayY[{lvl1}] = {dimY};\n".format(lvl=lvl, lvl1=lvl,dimY=5, dimX=5)
                else:
                    table += "    <td><h2 width = '{width}' height = '{height}'>&nbsp;</h2></td>\n".format(width=self.width, height=self.height)

            table += "  </tr>\n"
            contador += 1

        table += "</form>\n </table>\n <table> <td> <form role='form' method='post' action='/submitEixir' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='eixir' id='eixir' value='eixir' onclick='movimentSeleccionat(this)'>EIXIR</button>\n </form>\n </td>"
        table += "<td> &nbsp </td> <td> <form role='form' method='post' action='/submitClasificacio' enctype='multipart/form-data'>\n <button style='border:none;' class='myclass' type='submit' name='clasificacio' id='clasificacio' value='clasificacio' onclick='movimentSeleccionat(this)'>RANKING</button>\n </form>\n </td> </table>"

        function += "function openWin(lvl){\n setTimeout(function() {\n var widthLvl = arrayX[lvl] * 100;\n var heightLvl = arrayY[lvl] * 100;\n"
        # function += "let txt = 'width=' + String(widthLvl) + ', height=' + String(heightLvl) ;\n window.open('http://127.0.0.1:13000/level', 'LEVEL',+ txt); "

        # function += "window.open('http://127.0.0.1:13000/level', 'LEVEL', 'width=200, height=200'); "
        function += "window.open('http://127.0.0.1:13000/level', 'LEVEL', 'width='+ String(widthLvl) +', height='+String(heightLvl)); "

        function += "}, 500);\n }\n"
        function += "</script>\n <style>\n .myclass {\n display: inline-block;\n width: 32px;\n padding: 0px 0px;\n height: 32px;\n}\n</style>\n"

        self.fileout.writelines(top)
        self.fileout.writelines(table)
        self.fileout.writelines(function)
        self.fileout.close()